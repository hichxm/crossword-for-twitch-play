{"version":3,"sources":["webpack:///webpack/bootstrap aeea05842a4b46e7a4c7","webpack:///./node_modules/tmi.js/lib/utils.js","webpack:///./node_modules/preact/dist/preact.esm.js","webpack:///./node_modules/tmi.js/lib/client.js","webpack:///./main.js","webpack:///./component/crosswords.jsx","webpack:///./node_modules/tmi.js/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/tmi.js/lib/api.js","webpack:///request (ignored)","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/tmi.js/lib/commands.js","webpack:///./node_modules/tmi.js/lib/events.js","webpack:///./node_modules/tmi.js/lib/logger.js","webpack:///./node_modules/tmi.js/lib/parser.js","webpack:///./node_modules/tmi.js/lib/timer.js","webpack:///ws (ignored)","webpack:///./config.js","webpack:///./data/crosswords.json"],"names":["Main","chat","bind","setState","word","crossword","initCrossWord","that","client","options","debug","connection","reconnect","identity","username","password","channels","channel","state","connect","on","userstate","message","displayName","split","num","string","other","isNaN","say","toUpperCase","crosswords","document","body","props","addingWord","template","words","initialise","nextProps","renderTemplate","tpl","tr","forEach","rows","y","td","char","x","push","element","letters_positions","letters_position","getElementById","style","color","index","number","k","module","exports","config"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA,uBAAuB,kDAAkD,EAAE;;AAE3E;AACA,sBAAsB,kCAAkC,EAAE;;AAE1D;AACA,qBAAqB,iDAAiD,EAAE;;AAExE;AACA,sBAAsB,sCAAsC,EAAE;;AAE9D;AACA,6BAA6B,0DAA0D,EAAE;;AAEzF;AACA,mBAAmB,qBAAqB,EAAE;;AAE1C;AACA,oBAAoB,yCAAyC,EAAE;;AAE/D;AACA,qBAAqB,iCAAiC,EAAE;;AAExD;AACA,kBAAkB,oFAAoF,IAAI,EAAE,EAAE,qCAAqC,IAAI,EAAE,EAAE,0CAA0C,IAAI,EAAE,EAAE,sDAAsD,IAAI,qBAAqB,EAAE,qMAAqM,GAAG,eAAe,IAAI,kCAAkC,EAAE;;AAE7hB;AACA,mBAAmB,oBAAoB,2CAA2C,EAAE,EAAE;;AAEtF;AACA,qBAAqB,qEAAqE,wCAAwC,EAAE,EAAE;;AAEtI;AACA,0BAA0B,wCAAwC,2BAA2B,EAAE,EAAE,EAAE;;AAEnG;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,gCAAgC;AAChC,qBAAqB;AACrB,qBAAqB;AACrB,uBAAuB;AACvB,uBAAuB;AACvB,EAAE;;AAEF;AACA;AACA,yBAAyB,aAAa;AACtC;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC,kCAAkC,mBAAmB;AACrD;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,MAAM,GAAG,KAAK;AAC7B,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,wHAAwH,aAAa;AACrI;AACA,GAAG;AACH;AACA;AACA,EAAE;;AAEF;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA,GAAG;AACH;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,wCAAwC,wCAAwC;AAChF,UAAU,mBAAmB;AAC7B,IAAI,WAAW,mBAAmB;AAClC;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpKA;AAAA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,MAAM;AAClB;AACA,iBAAiB;;AAEjB;AACA,2BAA2B;;AAE3B;AACA,4BAA4B;;AAE5B;AACA,8BAA8B;AAC9B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0BAA0B,YAAY;AACpD;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA,GAAG;AACH;;AAEA;AACA,kCAAkC,0DAA0D;AAC5F;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;AACA,2CAA2C;AAC3C;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,IAAI;AACf,WAAW,IAAI;AACf,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C;AAC3C,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,sFAAsF;AACtF,GAAG;AACH,0FAA0F;AAC1F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,KAAK;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,UAAU;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ,wCAAwC,mCAAmC;AAC9F,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;;AAEA;AACA,WAAW;AACX;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,EAAE;;;AAGF;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA,CAAC;;AAED;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,YAAY,OAAO;AAC7C;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;AACA;;;;;;;AC7+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,yBAAyB;AACpE;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,gBAAgB;AAClD;;AAEA,SAAS,wBAAwB,EAAE;;AAEnC;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yDAAyD,0BAA0B;AACnF,yDAAyD,0BAA0B;AACnF,yDAAyD,2BAA2B;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8EAA8E,iCAAiC;AAC/G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA,mCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA,qDAAqD,2BAA2B;AAChF;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,IAAI,IAAI;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,iCAAiC;AAC9H;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yEAAyE,sBAAsB;AAC/F,yEAAyE,sBAAsB;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sEAAsE,sBAAsB;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,QAAQ,gBAAgB,kBAAkB,OAAO,QAAQ;AACnG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA,8CAA8C,QAAQ,IAAI,IAAI,4BAA4B,gBAAgB;AAC1G;AACA,yBAAyB;AACzB,8CAA8C,QAAQ,IAAI,IAAI,0BAA0B,SAAS,oBAAoB,gBAAgB;AACrI;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE,uCAAuC;AAC9G;AACA,sCAAsC,gBAAgB,EAAE;AACxD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,uCAAuC;AACvG,0FAA0F,sDAAsD;AAChJ;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sFAAsF,iCAAiC;;AAEvH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA,yBAAyB;AACzB,8CAA8C,QAAQ;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA,yBAAyB;AACzB;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;;AAEA;AACA,kFAAkF,iCAAiC;AACnH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,+BAA+B;AACvF,sFAAsF,kDAAkD;;AAExI;AACA;AACA;AACA;AACA,wDAAwD,+BAA+B;AACvF,oEAAoE,mCAAmC,EAAE;;AAEzG;AACA;AACA;;AAEA;AACA,wEAAwE,iCAAiC;AACzG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC;;AAEtF;AACA,2CAA2C,gCAAgC;;AAE3E;AACA,2CAA2C,qCAAqC;;AAEhF,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,6BAA6B,KAAK,IAAI;;AAEtF;AACA,mEAAmE,sDAAsD;AACzH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,MAAM,sBAAsB,KAAK,kDAAkD;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,QAAQ,KAAK,sBAAsB,KAAK,IAAI;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D,iCAAiC;AAChG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,iBAAiB;AAC3C,gCAAgC,oBAAoB;;AAEpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,qCAAqC;AAC5D,kBAAkB,aAAa;AAC/B,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,2BAA2B,KAAK,YAAY,GAAG,UAAU;;AAEjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY,WAAW,UAAU;AACxE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,cAAc;AAC3C,6BAA6B,cAAc;AAC3C,6BAA6B,cAAc,QAAQ,cAAc;AACjE;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,oCAAoC;AACjE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA,0BAA0B,2BAA2B,gBAAgB,EAAE;AACvE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,uCAAuC;AAClH;AACA,8BAA8B,2BAA2B,gBAAgB,EAAE;AAC3E;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qCAAqC,YAAY;AACjD,UAAU,kCAAkC;AAC5C;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,oCAAoC,EAAE;;AAEhF;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB,uBAAuB,QAAQ;AACpF,wCAAwC,mBAAmB,IAAI,QAAQ;AACvE;;AAEA;AACA;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA;;AAEA;AACA,cAAc,oCAAoC;AAClD,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,wCAAwC;;AAE9F;AACA;AACA;AACA;;AAEA;AACA,sEAAsE;AACtE,iBAAiB;AACjB;;AAEA,oCAAoC,mBAAmB,IAAI,QAAQ;;AAEnE;;AAEA;AACA;AACA;AACA,gDAAgD,gEAAgE;AAChH;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA,sFAAsF,gDAAgD;;AAEtI;AACA;AACA;AACA,kCAAkC,mBAAmB,MAAM,mBAAmB,KAAK,sDAAsD;AACzI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,mBAAmB,KAAK,mBAAmB,KAAK,QAAQ;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA,sCAAsC,yEAAyE;AAC/G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B,EAAE;AACxD,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,0CAA0C;AACzF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qCAAqC,EAAE;AAC1F,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,UAAU;;AAEjC;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C,uBAAuB,sBAAsB;;AAE7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,oBAAoB,UAAU;AAC9B;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA,wBAAwB,SAAS;AACjC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;AACA;AACA,uCAAuC,0BAA0B;AACjE,2DAA2D,8CAA8C;AACzG,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SA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ACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;ACpBA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,8DAA8D,IAAI,oCAAoC,IAAI,EAAE;;AAEpI;AACA;AACA,kCAAkC,sCAAsC;AACxE;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,qCAAqC,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mCAAmC;AAChF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,IAAI,EAAE,kCAAkC,WAAW,aAAa;AACxF;AACA;AACA;;AAEA;;;;;;;ACxDA,e;;;;;;ACAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;A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;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA,oDAAoD,gCAAgC,EAAE;AACtF,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,sBAAsB,aAAa;AACnC,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,sBAAsB,aAAa;AACnC,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+EAA+E,SAAS,GAAG,QAAQ,GAAG,OAAO;AAC7G;AACA;AACA,2BAA2B,iDAAiD;AAC5E,sBAAsB,aAAa;AACnC,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA,2BAA2B,8BAA8B;AACzD,sBAAsB,aAAa;AACnC,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,sBAAsB,aAAa;AACnC,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA,2BAA2B,8BAA8B;AACzD,sBAAsB,aAAa;AACnC,aAAa;AACb,SAAS;AACT,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,SAAS,GAAG,QAAQ;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;AC3eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,mBAAmB;;AAE3C;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;;AAEA;;AAEA,+BAA+B,cAAc;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,SAAS,OAAO,gCAAgC;AACnE;;AAEA;AACA;;AAEA;AACA;;AAEA,gCAAgC,gDAAgD;;AAEhF,wBAAwB,mBAAmB;;AAE3C;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,+BAA+B;AAC7D;AACA,4CAA4C,mCAAmC;AAC/E;AACA,UAAU,qDAAqD;;AAE/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,gCAAgC,gDAAgD;;AAEhF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,gDAAgD;;AAEhF,+CAA+C,aAAa;;AAE5D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,6CAA6C;AACvF;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,aAAa;;AAExC;AACA;AACA;AACA;AACA,cAAc,0BAA0B;;AAExC,0CAA0C,6CAA6C;AACvF;;AAEA;AACA;;AAEA;AACA;;AAEA,wBAAwB,aAAa;;AAErC;AACA;AACA,qCAAqC,mBAAmB;AACxD,sCAAsC,2BAA2B;AACjE;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC,sCAAsC;AACtE,yBAAyB,2BAA2B,4DAA4D,EAAE;AAClH;;AAEA;AACA;;AAEA;AACA;AACA,+CAA+C,UAAU;AACzD,8CAA8C,4BAA4B;AAC1E,UAAU,kCAAkC;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA,qCAAqC,UAAU;AAC/C,8BAA8B,0BAA0B;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACzTA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB,IAAI,MAAM,IAAI,QAAQ;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1BA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,2BAA2B;;AAErE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,2BAA2B;;AAErE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,eAAe;AAC5C;AACA,iCAAiC,4BAA4B;AAC7D,aAAa;AACb,6BAA6B,wBAAwB;AACrD,SAAS;;AAET;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;;AAE3D,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC1OA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,QAAQ;;AAEtB;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9CA,e;;;;;;;;;ACAA4B,OAAOC,OAAP,CAAeC,MAAf,GAAwB;AACpB;AACA/C,cAAU,UAFU;AAGpBC,cAAU,4CAHU;;AAKpB;AACAE,aAAS;AANW,CAAxB,C;;;;;;ACAA,kBAAkB,g3E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aeea05842a4b46e7a4c7","var self = module.exports = {\r\n\t// Return the second value if the first value is undefined..\r\n\tget: (obj1, obj2) => { return typeof obj1 === \"undefined\" ? obj2 : obj1; },\r\n\r\n\t// Value is a boolean..\r\n\tisBoolean: (obj) => { return typeof(obj) === \"boolean\"; },\r\n\r\n\t// Value is a finite number..\r\n\tisFinite: (int) => { return isFinite(int) && !isNaN(parseFloat(int)); },\r\n\r\n\t// Value is an integer..\r\n\tisInteger: (int) => { return !isNaN(self.toNumber(int, 0)); },\r\n\r\n\t// Username is a justinfan username..\r\n\tisJustinfan: (username) => { return RegExp(\"^(justinfan)(\\\\d+$)\", \"g\").test(username); },\r\n\r\n\t// Value is null..\r\n\tisNull: (obj) => { return obj === null; },\r\n\r\n\t// Value is a regex..\r\n\tisRegex: (str) => { return /[\\|\\\\\\^\\$\\*\\+\\?\\:\\#]/.test(str); },\r\n\r\n\t// Value is a string..\r\n\tisString: (str) => { return typeof(str) === \"string\"; },\r\n\r\n\t// Value is a valid url..\r\n\tisURL: (str) => { return RegExp(\"^(?:(?:https?|ftp)://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?)(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$\",\"i\").test(str); },\r\n\r\n\t// Return a random justinfan username..\r\n\tjustinfan: () => { return `justinfan${Math.floor((Math.random() * 80000) + 1000)}`; },\r\n\r\n\t// Return a valid password..\r\n\tpassword: (str) => { return str === \"SCHMOOPIIE\" || \"\" || null ? \"SCHMOOPIIE\" : `oauth:${str.toLowerCase().replace(\"oauth:\", \"\")}`; },\r\n\r\n\t// Race a promise against a delay..\r\n\tpromiseDelay: (time) => { return new Promise(function (resolve) { setTimeout(resolve, time); }); },\r\n\r\n\t// Replace all occurences of a string using an object..\r\n\treplaceAll: (str, obj) => {\r\n\t\tif (str === null || typeof str === \"undefined\") { return null; }\r\n\t    for (var x in obj) {\r\n\t        str = str.replace(new RegExp(x, \"g\"), obj[x]);\r\n\t    }\r\n\t    return str;\r\n\t},\r\n\r\n\tunescapeHtml: (safe) => {\r\n\t\treturn safe.replace(/\\\\&amp\\\\;/g, \"&\")\r\n\t\t\t.replace(/\\\\&lt\\\\;/g, \"<\")\r\n\t\t\t.replace(/\\\\&gt\\\\;/g, \">\")\r\n\t\t\t.replace(/\\\\&quot\\\\;/g, \"\\\"\")\r\n\t\t\t.replace(/\\\\&#039\\\\;/g, \"'\");\r\n\t},\r\n\r\n\t// Add word to a string..\r\n\taddWord: (line, word) => {\r\n\t\tif (line.length != 0) { line += \" \"; }\r\n\t\treturn (line += word);\r\n\t},\r\n\r\n\t// Return a valid channel name..\r\n\tchannel: (str) => {\r\n\t\tvar channel = typeof str === \"undefined\" || str === null ? \"\" : str;\r\n\t\treturn channel.charAt(0) === \"#\" ? channel.toLowerCase() : \"#\" + channel.toLowerCase();\r\n\t},\r\n\r\n\t// Extract a number from a string..\r\n\textractNumber: (str) => {\r\n\t\tvar parts = str.split(\" \");\r\n\t\tfor (var i = 0; i < parts.length; i++) {\r\n\t\t\tif (self.isInteger(parts[i])) { return ~~parts[i]; }\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\t// Format the date..\r\n\tformatDate: (date) => {\r\n\t    var hours = date.getHours();\r\n\t    var mins  = date.getMinutes();\r\n\r\n\t    hours = (hours < 10 ? \"0\" : \"\") + hours;\r\n\t    mins = (mins < 10 ? \"0\" : \"\") + mins;\r\n\r\n\t    return `${hours}:${mins}`;\r\n\t},\r\n\r\n\t// Inherit the prototype methods from one constructor into another..\r\n\tinherits: (ctor, superCtor) => {\r\n\t\tctor.super_ = superCtor\r\n\t    var TempCtor = function () {};\r\n\t    TempCtor.prototype = superCtor.prototype;\r\n\t    ctor.prototype = new TempCtor();\r\n\t    ctor.prototype.constructor = ctor;\r\n\t},\r\n\r\n\t// Return whether inside a Node application or not..\r\n\tisNode: () => {\r\n\t\ttry {\r\n\t\t\tif (module.exports = \"object\" === typeof process && Object.prototype.toString.call(process) === \"[object process]\") { return true; }\r\n\t\t\treturn false;\r\n\t\t} catch(e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\r\n\tisExtension: () => {\r\n\t\ttry {\r\n\t\t\tif (window.chrome && chrome.runtime && chrome.runtime.id) { return true; }\r\n\t\t\treturn false;\r\n\t\t} catch(e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\r\n\t// Merge two objects..\r\n\tmerge: (obj1, obj2) => {\r\n\t\tfor (var p in obj2) {\r\n\t\t\ttry {\r\n\t\t\t\tif (obj2[p].constructor == Object) { obj1[p] = self.merge(obj1[p], obj2[p]); }\r\n\t\t\t\telse { obj1[p] = obj2[p]; }\r\n\t\t\t} catch(e) { obj1[p] = obj2[p]; }\r\n\t\t}\r\n\t\treturn obj1;\r\n\t},\r\n\r\n\t// Split a line but don't cut a word in half..\r\n\tsplitLine: (input, length) => {\r\n\t\tvar lastSpace = input.substring(0, length).lastIndexOf(\" \");\r\n\t\treturn [input.substring(0, lastSpace), input.substring(lastSpace + 1)];\r\n\t},\r\n\r\n\t// Parse string to number. Returns NaN if string can't be parsed to number..\r\n\ttoNumber: (num, precision) => {\r\n\t\tif (num === null) return 0;\r\n\t\tvar factor = Math.pow(10, self.isFinite(precision) ? precision : 0);\r\n\t\treturn Math.round(num * factor) / factor;\r\n\t},\r\n\r\n\t// Merge two arrays..\r\n\tunion: (arr1, arr2) => {\r\n\t\tvar hash = {};\r\n\t\tvar ret = [];\r\n\t\tfor(var i=0; i < arr1.length; i++) {\r\n\t\t\tvar e = arr1[i];\r\n\t\t\tif (!hash[e]) {\r\n\t\t\t\thash[e] = true;\r\n\t\t\t\tret.push(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var i=0; i < arr2.length; i++) {\r\n\t\t\tvar e = arr2[i];\r\n\t\t\tif (!hash[e]) {\r\n\t\t\t\thash[e] = true;\r\n\t\t\t\tret.push(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t},\r\n\r\n\t// Return a valid username..\r\n\tusername: (str) => {\r\n\t\tvar username = typeof str === \"undefined\" || str === null ? \"\" : str;\r\n\t\treturn username.charAt(0) === \"#\" ? username.substring(1).toLowerCase() : username.toLowerCase();\r\n\t}\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/utils.js\n// module id = 0\n// module chunks = 0","/** Virtual DOM Node */\nfunction VNode() {}\n\n/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\nvar options = {\n\n\t/** If `true`, `prop` changes trigger synchronous component updates.\n  *\t@name syncComponentUpdates\n  *\t@type Boolean\n  *\t@default true\n  */\n\t//syncComponentUpdates: true,\n\n\t/** Processes all created VNodes.\n  *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n  */\n\t//vnode(vnode) { }\n\n\t/** Hook invoked after a component is mounted. */\n\t// afterMount(component) { }\n\n\t/** Hook invoked after the DOM is updated with a component's latest render. */\n\t// afterUpdate(component) { }\n\n\t/** Hook invoked immediately before a component is unmounted. */\n\t// beforeUnmount(component) { }\n};\n\nvar stack = [];\n\nvar EMPTY_CHILDREN = [];\n\n/**\n * JSX/hyperscript reviver.\n * @see http://jasonformat.com/wtf-is-jsx\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\n * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.\n *\n * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation\n * of the structure of a DOM tree. This structure can be realized by recursively comparing it against\n * the current _actual_ DOM structure, and applying only the differences.\n *\n * `h()`/`createElement()` accepts an element name, a list of attributes/props,\n * and optionally children to append to the element.\n *\n * @example The following DOM tree\n *\n * `<div id=\"foo\" name=\"bar\">Hello!</div>`\n *\n * can be constructed using this function as:\n *\n * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`\n *\n * @param {string} nodeName\tAn element name. Ex: `div`, `a`, `span`, etc.\n * @param {Object} attributes\tAny attributes/props to set on the created element.\n * @param rest\t\t\tAdditional arguments are taken to be children to append. Can be infinitely nested Arrays.\n *\n * @public\n */\nfunction h(nodeName, attributes) {\n\tvar children = EMPTY_CHILDREN,\n\t    lastSimple,\n\t    child,\n\t    simple,\n\t    i;\n\tfor (i = arguments.length; i-- > 2;) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children != null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop !== undefined) {\n\t\t\tfor (i = child.length; i--;) {\n\t\t\t\tstack.push(child[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof child === 'boolean') child = null;\n\n\t\t\tif (simple = typeof nodeName !== 'function') {\n\t\t\t\tif (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length - 1] += child;\n\t\t\t} else if (children === EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t} else {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tvar p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes == null ? undefined : attributes;\n\tp.key = attributes == null ? undefined : attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode !== undefined) options.vnode(p);\n\n\treturn p;\n}\n\n/**\n *  Copy all properties from `props` onto `obj`.\n *  @param {Object} obj\t\tObject onto which properties should be copied.\n *  @param {Object} props\tObject from which to copy properties.\n *  @returns obj\n *  @private\n */\nfunction extend(obj, props) {\n  for (var i in props) {\n    obj[i] = props[i];\n  }return obj;\n}\n\n/**\n * Call a function asynchronously, as soon as possible. Makes\n * use of HTML Promise to schedule the callback if available,\n * otherwise falling back to `setTimeout` (mainly for IE<11).\n *\n * @param {Function} callback\n */\nvar defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {VNode} vnode\t\tThe virutal DOM element to clone\n * @param {Object} props\tAttributes/props to add when cloning\n * @param {VNode} rest\t\tAny additional arguments will be used as replacement children.\n */\nfunction cloneElement(vnode, props) {\n  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n}\n\n// DOM properties that should NOT have \"px\" added when numeric\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n/** Managed queue of dirty components to be re-rendered */\n\nvar items = [];\n\nfunction enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component) == 1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\nfunction rerender() {\n\tvar p,\n\t    list = items;\n\titems = [];\n\twhile (p = list.pop()) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n\n/**\n * Check if two nodes are equivalent.\n *\n * @param {Node} node\t\t\tDOM Node to compare\n * @param {VNode} vnode\t\t\tVirtual DOM node to compare\n * @param {boolean} [hyrdating=false]\tIf true, ignores component constructors when comparing.\n * @private\n */\nfunction isSameNodeType(node, vnode, hydrating) {\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    return node.splitText !== undefined;\n  }\n  if (typeof vnode.nodeName === 'string') {\n    return !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n  }\n  return hydrating || node._componentConstructor === vnode.nodeName;\n}\n\n/**\n * Check if an Element has a given nodeName, case-insensitively.\n *\n * @param {Element} node\tA DOM Element to inspect the name of.\n * @param {String} nodeName\tUnnormalized name to compare against.\n */\nfunction isNamedNode(node, nodeName) {\n  return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n}\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n *\n * @param {VNode} vnode\n * @returns {Object} props\n */\nfunction getNodeProps(vnode) {\n  var props = extend({}, vnode.attributes);\n  props.children = vnode.children;\n\n  var defaultProps = vnode.nodeName.defaultProps;\n  if (defaultProps !== undefined) {\n    for (var i in defaultProps) {\n      if (props[i] === undefined) {\n        props[i] = defaultProps[i];\n      }\n    }\n  }\n\n  return props;\n}\n\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\nfunction createNode(nodeName, isSvg) {\n\tvar node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n/** Remove a child node from its parent if attached.\n *\t@param {Element} node\t\tThe node to remove\n */\nfunction removeNode(node) {\n\tvar parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nfunction setAccessor(node, name, old, value, isSvg) {\n\tif (name === 'className') name = 'class';\n\n\tif (name === 'key') {\n\t\t// ignore\n\t} else if (name === 'ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t} else if (name === 'class' && !isSvg) {\n\t\tnode.className = value || '';\n\t} else if (name === 'style') {\n\t\tif (!value || typeof value === 'string' || typeof old === 'string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value === 'object') {\n\t\t\tif (typeof old !== 'string') {\n\t\t\t\tfor (var i in old) {\n\t\t\t\t\tif (!(i in value)) node.style[i] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i in value) {\n\t\t\t\tnode.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];\n\t\t\t}\n\t\t}\n\t} else if (name === 'dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t} else if (name[0] == 'o' && name[1] == 'n') {\n\t\tvar useCapture = name !== (name = name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t} else {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t} else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {\n\t\tsetProperty(node, name, value == null ? '' : value);\n\t\tif (value == null || value === false) node.removeAttribute(name);\n\t} else {\n\t\tvar ns = isSvg && name !== (name = name.replace(/^xlink\\:?/, ''));\n\t\tif (value == null || value === false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);\n\t\t} else if (typeof value !== 'function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n\ttry {\n\t\tnode[name] = value;\n\t} catch (e) {}\n}\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nvar mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nvar diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nvar isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nvar hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nfunction flushMounts() {\n\tvar c;\n\twhile (c = mounts.pop()) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nfunction diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent != null && parent.ownerSVGElement !== undefined;\n\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom != null && !('__preactattr_' in dom);\n\t}\n\n\tvar ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode !== parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (! --diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tvar out = dom,\n\t    prevSvgMode = isSvgMode;\n\n\t// empty values (null, undefined, booleans) render as empty Text nodes\n\tif (vnode == null || typeof vnode === 'boolean') vnode = '';\n\n\t// Fast case: Strings & Numbers create/update Text nodes.\n\tif (typeof vnode === 'string' || typeof vnode === 'number') {\n\n\t\t// update if it's already a Text node:\n\t\tif (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\n\t\t\tif (dom.nodeValue != vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t} else {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout['__preactattr_'] = true;\n\n\t\treturn out;\n\t}\n\n\t// If the VNode represents a Component, perform a component diff:\n\tvar vnodeName = vnode.nodeName;\n\tif (typeof vnodeName === 'function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;\n\n\t// If there's no existing element or it's the wrong type, create a new one:\n\tvnodeName = String(vnodeName);\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\n\t\tout = createNode(vnodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) {\n\t\t\t\tout.appendChild(dom.firstChild);\n\t\t\t} // if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\tvar fc = out.firstChild,\n\t    props = out['__preactattr_'],\n\t    vchildren = vnode.children;\n\n\tif (props == null) {\n\t\tprops = out['__preactattr_'] = {};\n\t\tfor (var a = out.attributes, i = a.length; i--;) {\n\t\t\tprops[a[i].name] = a[i].value;\n\t\t}\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {\n\t\tif (fc.nodeValue != vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc != null) {\n\t\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);\n\t\t}\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n\tvar originalChildren = dom.childNodes,\n\t    children = [],\n\t    keyed = {},\n\t    keyedLen = 0,\n\t    min = 0,\n\t    len = originalChildren.length,\n\t    childrenLen = 0,\n\t    vlen = vchildren ? vchildren.length : 0,\n\t    j,\n\t    c,\n\t    f,\n\t    vchild,\n\t    child;\n\n\t// Build up a map of keyed children and an Array of unkeyed children:\n\tif (len !== 0) {\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tvar _child = originalChildren[i],\n\t\t\t    props = _child['__preactattr_'],\n\t\t\t    key = vlen && props ? _child._component ? _child._component.__key : props.key : null;\n\t\t\tif (key != null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = _child;\n\t\t\t} else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = _child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen !== 0) {\n\t\tfor (var i = 0; i < vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tvar key = vchild.key;\n\t\t\tif (key != null) {\n\t\t\t\tif (keyedLen && keyed[key] !== undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (!child && min < childrenLen) {\n\t\t\t\t\tfor (j = min; j < childrenLen; j++) {\n\t\t\t\t\t\tif (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\t\tif (j === childrenLen - 1) childrenLen--;\n\t\t\t\t\t\t\tif (j === min) min++;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tf = originalChildren[i];\n\t\t\tif (child && child !== dom && child !== f) {\n\t\t\t\tif (f == null) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t} else if (child === f.nextSibling) {\n\t\t\t\t\tremoveNode(f);\n\t\t\t\t} else {\n\t\t\t\t\tdom.insertBefore(child, f);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// remove unused keyed children:\n\tif (keyedLen) {\n\t\tfor (var i in keyed) {\n\t\t\tif (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);\n\t\t}\n\t}\n\n\t// remove orphaned unkeyed children:\n\twhile (min <= childrenLen) {\n\t\tif ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);\n\t}\n}\n\n/** Recursively recycle (or just unmount) a node and its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nfunction recollectNodeTree(node, unmountOnly) {\n\tvar component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t} else {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);\n\n\t\tif (unmountOnly === false || node['__preactattr_'] == null) {\n\t\t\tremoveNode(node);\n\t\t}\n\n\t\tremoveChildren(node);\n\t}\n}\n\n/** Recollect/unmount all children.\n *\t- we use .lastChild here because it causes less reflow than .firstChild\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\n */\nfunction removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tvar next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\tvar name;\n\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name] != null) && old[name] != null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nvar components = {};\n\n/** Reclaim a component for later re-use by the recycler. */\nfunction collectComponent(component) {\n\tvar name = component.constructor.name;\n\t(components[name] || (components[name] = [])).push(component);\n}\n\n/** Create a component. Normalizes differences between PFC's and classful Components. */\nfunction createComponent(Ctor, props, context) {\n\tvar list = components[Ctor.name],\n\t    inst;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t} else {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\n\tif (list) {\n\t\tfor (var i = list.length; i--;) {\n\t\t\tif (list[i].constructor === Ctor) {\n\t\t\t\tinst.nextBase = list[i].nextBase;\n\t\t\t\tlist.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn inst;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nfunction setComponentProps(component, props, opts, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif (component.__ref = props.ref) delete props.ref;\n\tif (component.__key = props.key) delete props.key;\n\n\tif (!component.base || mountAll) {\n\t\tif (component.componentWillMount) component.componentWillMount();\n\t} else if (component.componentWillReceiveProps) {\n\t\tcomponent.componentWillReceiveProps(props, context);\n\t}\n\n\tif (context && context !== component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (opts !== 0) {\n\t\tif (opts === 1 || options.syncComponentUpdates !== false || !component.base) {\n\t\t\trenderComponent(component, 1, mountAll);\n\t\t} else {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nfunction renderComponent(component, opts, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tvar props = component.props,\n\t    state = component.state,\n\t    context = component.context,\n\t    previousProps = component.prevProps || props,\n\t    previousState = component.prevState || state,\n\t    previousContext = component.prevContext || context,\n\t    isUpdate = component.base,\n\t    nextBase = component.nextBase,\n\t    initialBase = isUpdate || nextBase,\n\t    initialChildComponent = component._component,\n\t    skip = false,\n\t    rendered,\n\t    inst,\n\t    cbase;\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t} else if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\trendered = component.render(props, state, context);\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tvar childComponent = rendered && rendered.nodeName,\n\t\t    toUnmount,\n\t\t    base;\n\n\t\tif (typeof childComponent === 'function') {\n\t\t\t// set up high order component link\n\n\t\t\tvar childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor === childComponent && childProps.key == inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, 1, context, false);\n\t\t\t} else {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, 0, context, false);\n\t\t\t\trenderComponent(inst, 1, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t} else {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || opts === 1) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base !== initialBase && inst !== initialChildComponent) {\n\t\t\tvar baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base !== baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tvar componentRef = component,\n\t\t\t    t = component;\n\t\t\twhile (t = t._parentComponent) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t} else if (!skip) {\n\t\t// Ensure that pending componentDidMount() hooks of child components\n\t\t// are called before the componentDidUpdate() hook in the parent.\n\t\t// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750\n\t\t// flushMounts();\n\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, previousContext);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\tif (component._renderCallbacks != null) {\n\t\twhile (component._renderCallbacks.length) {\n\t\t\tcomponent._renderCallbacks.pop().call(component);\n\t\t}\n\t}\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nfunction buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tvar c = dom && dom._component,\n\t    originalComponent = c,\n\t    oldDom = dom,\n\t    isDirectOwner = c && dom._componentConstructor === vnode.nodeName,\n\t    isOwner = isDirectOwner,\n\t    props = getNodeProps(vnode);\n\twhile (c && !isOwner && (c = c._parentComponent)) {\n\t\tisOwner = c.constructor === vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, 3, context, mountAll);\n\t\tdom = c.base;\n\t} else {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, 1, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom !== oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nfunction unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\tvar base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tvar inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t} else if (base) {\n\t\tif (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tremoveNode(base);\n\t\tcollectComponent(component);\n\n\t\tremoveChildren(base);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n\n/** Base Component class.\n *\tProvides `setState()` and `forceUpdate()`, which trigger rendering.\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nfunction Component(props, context) {\n\tthis._dirty = true;\n\n\t/** @public\n  *\t@type {object}\n  */\n\tthis.context = context;\n\n\t/** @public\n  *\t@type {object}\n  */\n\tthis.props = props;\n\n\t/** @public\n  *\t@type {object}\n  */\n\tthis.state = this.state || {};\n}\n\nextend(Component.prototype, {\n\n\t/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.\n  *\t@param {object} nextProps\n  *\t@param {object} nextState\n  *\t@param {object} nextContext\n  *\t@returns {Boolean} should the component re-render\n  *\t@name shouldComponentUpdate\n  *\t@function\n  */\n\n\t/** Update component state by copying properties from `state` to `this.state`.\n  *\t@param {object} state\t\tA hash of state properties to update with new values\n  *\t@param {function} callback\tA function to be called once component state is updated\n  */\n\tsetState: function setState(state, callback) {\n\t\tvar s = this.state;\n\t\tif (!this.prevState) this.prevState = extend({}, s);\n\t\textend(s, typeof state === 'function' ? state(s, this.props) : state);\n\t\tif (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/** Immediately perform a synchronous re-render of the component.\n  *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n  *\t@private\n  */\n\tforceUpdate: function forceUpdate(callback) {\n\t\tif (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);\n\t\trenderComponent(this, 2);\n\t},\n\n\n\t/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n  *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n  *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n  *\t@param {object} state\t\tThe component's current state\n  *\t@param {object} context\t\tContext object (if a parent component has provided context)\n  *\t@returns VNode\n  */\n\trender: function render() {}\n});\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nfunction render(vnode, parent, merge) {\n  return diff(merge, vnode, {}, false, parent, false);\n}\n\nvar preact = {\n\th: h,\n\tcreateElement: h,\n\tcloneElement: cloneElement,\n\tComponent: Component,\n\trender: render,\n\trerender: rerender,\n\toptions: options\n};\n\nexport { h, h as createElement, cloneElement, Component, render, rerender, options };\nexport default preact;\n//# sourceMappingURL=preact.esm.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/preact/dist/preact.esm.js\n// module id = 1\n// module chunks = 0","var api = require(\"./api\");\r\nvar commands = require(\"./commands\");\r\nvar eventEmitter = require(\"./events\").EventEmitter;\r\nvar logger = require(\"./logger\");\r\nvar parse = require(\"./parser\");\r\nvar timer = require(\"./timer\");\r\nvar ws = global.WebSocket || global.MozWebSocket || require(\"ws\");\r\nvar _ = require(\"./utils\");\r\n\r\n// Client instance..\r\nvar client = function client(opts) {\r\n    if (this instanceof client === false) { return new client(opts); }\r\n    this.setMaxListeners(0);\r\n\r\n    this.opts = _.get(opts, {});\r\n    this.opts.channels = this.opts.channels || [];\r\n    this.opts.connection = this.opts.connection || {};\r\n    this.opts.identity = this.opts.identity || {};\r\n    this.opts.options = this.opts.options || {};\r\n\r\n    this.clientId = _.get(this.opts.options.clientId, null);\r\n\r\n    this.maxReconnectAttempts = _.get(this.opts.connection.maxReconnectAttempts, Infinity);\r\n    this.maxReconnectInterval = _.get(this.opts.connection.maxReconnectInterval, 30000);\r\n    this.reconnect = _.get(this.opts.connection.reconnect, false);\r\n    this.reconnectDecay = _.get(this.opts.connection.reconnectDecay, 1.5);\r\n    this.reconnectInterval = _.get(this.opts.connection.reconnectInterval, 1000);\r\n\r\n    this.reconnecting = false;\r\n    this.reconnections = 0;\r\n    this.reconnectTimer = this.reconnectInterval;\r\n\r\n    this.secure = _.get(this.opts.connection.secure, false);\r\n\r\n    // Raw data and object for emote-sets..\r\n    this.emotes = \"\";\r\n    this.emotesets = {};\r\n\r\n    this.channels = [];\r\n    this.currentLatency = 0;\r\n    this.globaluserstate = {};\r\n    this.lastJoined = \"\";\r\n    this.latency = new Date();\r\n    this.moderators = {};\r\n    this.pingLoop = null;\r\n    this.pingTimeout = null;\r\n    this.reason = \"\";\r\n    this.username = \"\";\r\n    this.userstate = {};\r\n    this.wasCloseCalled = false;\r\n    this.ws = null;\r\n\r\n    // Create the logger..\r\n    var level = \"error\";\r\n    if (this.opts.options.debug) { level = \"info\"; }\r\n    this.log = this.opts.logger || logger;\r\n\r\n    try { logger.setLevel(level); } catch(e) {};\r\n\r\n    // Format the channel names..\r\n    this.opts.channels.forEach(function(part, index, theArray) {\r\n        theArray[index] = _.channel(part);\r\n    });\r\n\r\n    eventEmitter.call(this);\r\n}\r\n\r\n_.inherits(client, eventEmitter);\r\n\r\nclient.prototype.api = api;\r\n\r\n// Put all commands in prototype..\r\nfor(var methodName in commands) {\r\n    client.prototype[methodName] = commands[methodName];\r\n}\r\n\r\n// Handle parsed chat server message..\r\nclient.prototype.handleMessage = function handleMessage(message) {\r\n    if (!_.isNull(message)) {\r\n        var channel = _.channel(_.get(message.params[0], null));\r\n        var msg = _.get(message.params[1], null);\r\n        var msgid = _.get(message.tags[\"msg-id\"], null);\r\n\r\n        // Parse badges and emotes..\r\n        message.tags = parse.badges(parse.emotes(message.tags));\r\n\r\n        // Transform IRCv3 tags..\r\n        if (message.tags) {\r\n            for(var key in message.tags) {\r\n                if (key !== \"emote-sets\" && key !== \"ban-duration\" && key !== \"bits\") {\r\n                    if (_.isBoolean(message.tags[key])) { message.tags[key] = null; }\r\n                    else if (message.tags[key] === \"1\") { message.tags[key] = true; }\r\n                    else if (message.tags[key] === \"0\") { message.tags[key] = false; }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Messages with no prefix..\r\n        if (_.isNull(message.prefix)) {\r\n            switch(message.command) {\r\n                // Received PING from server..\r\n                case \"PING\":\r\n                    this.emit(\"ping\");\r\n                    if (!_.isNull(this.ws) && this.ws.readyState !== 2 && this.ws.readyState !== 3) {\r\n                        this.ws.send(\"PONG\");\r\n                    }\r\n                    break;\r\n\r\n                // Received PONG from server, return current latency..\r\n                case \"PONG\":\r\n                    var currDate = new Date();\r\n                    this.currentLatency = (currDate.getTime() - this.latency.getTime()) / 1000;\r\n                    this.emits([\"pong\", \"_promisePing\"], [[this.currentLatency], [this.currentLatency]]);\r\n\r\n                    clearTimeout(this.pingTimeout);\r\n                    break;\r\n\r\n                default:\r\n                    this.log.warn(`Could not parse message with no prefix:\\n${JSON.stringify(message, null, 4)}`);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Messages with \"tmi.twitch.tv\" as a prefix..\r\n        else if (message.prefix === \"tmi.twitch.tv\") {\r\n            switch(message.command) {\r\n                case \"002\":\r\n                case \"003\":\r\n                case \"004\":\r\n                case \"375\":\r\n                case \"376\":\r\n                case \"CAP\":\r\n                    break;\r\n\r\n                // Retrieve username from server..\r\n                case \"001\":\r\n                    this.username = message.params[0];\r\n                    break;\r\n\r\n                // Connected to server..\r\n                case \"372\":\r\n                    this.log.info(\"Connected to server.\");\r\n                    this.userstate[\"#tmijs\"] = {};\r\n                    this.emits([\"connected\", \"_promiseConnect\"], [[this.server, this.port], [null]]);\r\n                    this.reconnections = 0;\r\n                    this.reconnectTimer = this.reconnectInterval;\r\n\r\n                    // Set an internal ping timeout check interval..\r\n                    this.pingLoop = setInterval(() => {\r\n                        // Make sure the connection is opened before sending the message..\r\n                        if (!_.isNull(this.ws) && this.ws.readyState !== 2 && this.ws.readyState !== 3) {\r\n                            this.ws.send(\"PING\");\r\n                        }\r\n                        this.latency = new Date();\r\n                        this.pingTimeout = setTimeout(() => {\r\n                            if (!_.isNull(this.ws)) {\r\n                                this.wasCloseCalled = false;\r\n                                this.log.error(\"Ping timeout.\");\r\n                                this.ws.close();\r\n\r\n                                clearInterval(this.pingLoop);\r\n                                clearTimeout(this.pingTimeout);\r\n                            }\r\n                        }, _.get(this.opts.connection.timeout, 9999));\r\n                    }, 60000);\r\n\r\n                    // Join all the channels from configuration with a 2 seconds interval..\r\n                    var joinQueue = new timer.queue(2000);\r\n                    var joinChannels = _.union(this.opts.channels, this.channels);\r\n                    this.channels = [];\r\n\r\n                    for (var i = 0; i < joinChannels.length; i++) {\r\n                        var self = this;\r\n                        joinQueue.add(function(i) {\r\n                            if (!_.isNull(self.ws) && self.ws.readyState !== 2 && self.ws.readyState !== 3) {\r\n                                self.ws.send(`JOIN ${_.channel(joinChannels[i])}`);\r\n                            }\r\n                        }.bind(this, i))\r\n                    }\r\n\r\n                    joinQueue.run();\r\n                    break;\r\n\r\n                // https://github.com/justintv/Twitch-API/blob/master/chat/capabilities.md#notice\r\n                case \"NOTICE\":\r\n                    switch(msgid) {\r\n                        // This room is now in subscribers-only mode.\r\n                        case \"subs_on\":\r\n                            this.log.info(`[${channel}] This room is now in subscribers-only mode.`);\r\n                            this.emits([\"subscriber\", \"subscribers\", \"_promiseSubscribers\"], [[channel, true], [channel, true], [null]]);\r\n                            break;\r\n\r\n                        // This room is no longer in subscribers-only mode.\r\n                        case \"subs_off\":\r\n                            this.log.info(`[${channel}] This room is no longer in subscribers-only mode.`);\r\n                            this.emits([\"subscriber\", \"subscribers\", \"_promiseSubscribersoff\"], [[channel, false], [channel, false], [null]]);\r\n                            break;\r\n\r\n                        // This room is now in emote-only mode.\r\n                        case \"emote_only_on\":\r\n                            this.log.info(`[${channel}] This room is now in emote-only mode.`);\r\n                            this.emits([\"emoteonly\", \"_promiseEmoteonly\"], [[channel, true], [null]]);\r\n                            break;\r\n\r\n                        // This room is no longer in emote-only mode.\r\n                        case \"emote_only_off\":\r\n                            this.log.info(`[${channel}] This room is no longer in emote-only mode.`);\r\n                            this.emits([\"emoteonly\", \"_promiseEmoteonlyoff\"], [[channel, false], [null]]);\r\n                            break;\r\n\r\n                        // Do not handle slow_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.\r\n                        case \"slow_on\":\r\n                        case \"slow_off\":\r\n                            break;\r\n\r\n                        // Do not handle followers_on/off here, listen to the ROOMSTATE notice instead as it returns the delay.\r\n                        case \"followers_on_zero\":\r\n                        case \"followers_on\":\r\n                        case \"followers_off\":\r\n                            break;\r\n\r\n                        // This room is now in r9k mode.\r\n                        case \"r9k_on\":\r\n                            this.log.info(`[${channel}] This room is now in r9k mode.`);\r\n                            this.emits([\"r9kmode\", \"r9kbeta\", \"_promiseR9kbeta\"], [[channel, true], [channel, true], [null]]);\r\n                            break;\r\n\r\n                        // This room is no longer in r9k mode.\r\n                        case \"r9k_off\":\r\n                            this.log.info(`[${channel}] This room is no longer in r9k mode.`);\r\n                            this.emits([\"r9kmode\", \"r9kbeta\", \"_promiseR9kbetaoff\"], [[channel, false], [channel, false], [null]]);\r\n                            break;\r\n\r\n                        // The moderators of this room are [...]\r\n                        case \"room_mods\":\r\n                            var splitted = msg.split(\":\");\r\n                            var mods = splitted[1].replace(/,/g, \"\").split(\":\").toString().toLowerCase().split(\" \");\r\n\r\n                            for(var i = mods.length - 1; i >= 0; i--) {\r\n                                if(mods[i] === \"\") {\r\n                                    mods.splice(i, 1);\r\n                                }\r\n                            }\r\n\r\n                            this.emits([\"_promiseMods\", \"mods\"], [[null, mods], [channel, mods]]);\r\n                            break;\r\n\r\n                        // There are no moderators for this room.\r\n                        case \"no_mods\":\r\n                            this.emit(\"_promiseMods\", null, []);\r\n                            break;\r\n\r\n                        // Channel is suspended..\r\n                        case \"msg_channel_suspended\":\r\n                            this.emits([\"notice\", \"_promiseJoin\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Ban command failed..\r\n                        case \"already_banned\":\r\n                        case \"bad_ban_admin\":\r\n                        case \"bad_ban_broadcaster\":\r\n                        case \"bad_ban_global_mod\":\r\n                        case \"bad_ban_self\":\r\n                        case \"bad_ban_staff\":\r\n                        case \"usage_ban\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseBan\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Ban command success..\r\n                        case \"ban_success\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseBan\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Clear command failed..\r\n                        case \"usage_clear\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseClear\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Mods command failed..\r\n                        case \"usage_mods\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseMods\"], [[channel, msgid, msg], [msgid, []]]);\r\n                            break;\r\n\r\n                        // Mod command success..\r\n                        case \"mod_success\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseMod\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Mod command failed..\r\n                        case \"usage_mod\":\r\n                        case \"bad_mod_banned\":\r\n                        case \"bad_mod_mod\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseMod\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Unmod command success..\r\n                        case \"unmod_success\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseUnmod\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Unmod command failed..\r\n                        case \"usage_unmod\":\r\n                        case \"bad_unmod_mod\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseUnmod\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Color command success..\r\n                        case \"color_changed\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseColor\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Color command failed..\r\n                        case \"usage_color\":\r\n                        case \"turbo_only_color\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseColor\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Commercial command success..\r\n                        case \"commercial_success\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseCommercial\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Commercial command failed..\r\n                        case \"usage_commercial\":\r\n                        case \"bad_commercial_error\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseCommercial\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Host command success..\r\n                        case \"hosts_remaining\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            var remainingHost = (!isNaN(msg.charAt(0)) ? msg.charAt(0) : 0);\r\n                            this.emits([\"notice\", \"_promiseHost\"], [[channel, msgid, msg], [null, ~~remainingHost]]);\r\n                            break;\r\n\r\n                        // Host command failed..\r\n                        case \"bad_host_hosting\":\r\n                        case \"bad_host_rate_exceeded\":\r\n                        case \"bad_host_error\":\r\n                        case \"usage_host\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseHost\"], [[channel, msgid, msg], [msgid, null]]);\r\n                            break;\r\n\r\n                        // r9kbeta command failed..\r\n                        case \"already_r9k_on\":\r\n                        case \"usage_r9k_on\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseR9kbeta\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // r9kbetaoff command failed..\r\n                        case \"already_r9k_off\":\r\n                        case \"usage_r9k_off\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseR9kbetaoff\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Timeout command success..\r\n                        case \"timeout_success\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseTimeout\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Subscribersoff command failed..\r\n                        case \"already_subs_off\":\r\n                        case \"usage_subs_off\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseSubscribersoff\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Subscribers command failed..\r\n                        case \"already_subs_on\":\r\n                        case \"usage_subs_on\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseSubscribers\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Emoteonlyoff command failed..\r\n                        case \"already_emote_only_off\":\r\n                        case \"usage_emote_only_off\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseEmoteonlyoff\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Emoteonly command failed..\r\n                        case \"already_emote_only_on\":\r\n                        case \"usage_emote_only_on\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseEmoteonly\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Slow command failed..\r\n                        case \"usage_slow_on\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseSlow\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Slowoff command failed..\r\n                        case \"usage_slow_off\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseSlowoff\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Timeout command failed..\r\n                        case \"usage_timeout\":\r\n                        case \"bad_timeout_admin\":\r\n                        case \"bad_timeout_broadcaster\":\r\n                        case \"bad_timeout_duration\":\r\n                        case \"bad_timeout_global_mod\":\r\n                        case \"bad_timeout_self\":\r\n                        case \"bad_timeout_staff\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseTimeout\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Unban command success..\r\n                        case \"unban_success\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseUnban\"], [[channel, msgid, msg], [null]]);\r\n                            break;\r\n\r\n                        // Unban command failed..\r\n                        case \"usage_unban\":\r\n                        case \"bad_unban_no_ban\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseUnban\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Unhost command failed..\r\n                        case \"usage_unhost\":\r\n                        case \"not_hosting\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseUnhost\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Whisper command failed..\r\n                        case \"whisper_invalid_login\":\r\n                        case \"whisper_invalid_self\":\r\n                        case \"whisper_limit_per_min\":\r\n                        case \"whisper_limit_per_sec\":\r\n                        case \"whisper_restricted_recipient\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\"notice\", \"_promiseWhisper\"], [[channel, msgid, msg], [msgid]]);\r\n                            break;\r\n\r\n                        // Permission error..\r\n                        case \"no_permission\":\r\n                        case \"msg_banned\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emits([\r\n                                \"notice\",\r\n                                \"_promiseBan\",\r\n                                \"_promiseClear\",\r\n                                \"_promiseUnban\",\r\n                                \"_promiseTimeout\",\r\n                                \"_promiseMod\",\r\n                                \"_promiseUnmod\",\r\n                                \"_promiseCommercial\",\r\n                                \"_promiseHost\",\r\n                                \"_promiseUnhost\",\r\n                                \"_promiseR9kbeta\",\r\n                                \"_promiseR9kbetaoff\",\r\n                                \"_promiseSlow\",\r\n                                \"_promiseSlowoff\",\r\n                                \"_promiseFollowers\",\r\n                                \"_promiseFollowersoff\",\r\n                                \"_promiseSubscribers\",\r\n                                \"_promiseSubscribersoff\",\r\n                                \"_promiseEmoteonly\",\r\n                                \"_promiseEmoteonlyoff\"\r\n                            ], [\r\n                                [channel, msgid, msg],\r\n                                [msgid], [msgid], [msgid], [msgid],\r\n                                [msgid], [msgid], [msgid], [msgid],\r\n                                [msgid], [msgid], [msgid], [msgid],\r\n                                [msgid], [msgid], [msgid], [msgid],\r\n                                [msgid], [msgid], [msgid]\r\n                            ]);\r\n                            break;\r\n\r\n                        // Unrecognized command..\r\n                        case \"unrecognized_cmd\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emit(\"notice\", channel, msgid, msg);\r\n\r\n                            if (msg.split(\" \").splice(-1)[0] === \"/w\") {\r\n                                this.log.warn(\"You must be connected to a group server to send or receive whispers.\");\r\n                            }\r\n                            break;\r\n\r\n                        // Send the following msg-ids to the notice event listener..\r\n                        case \"cmds_available\":\r\n                        case \"host_target_went_offline\":\r\n                        case \"msg_censored_broadcaster\":\r\n                        case \"msg_duplicate\":\r\n                        case \"msg_emoteonly\":\r\n                        case \"msg_verified_email\":\r\n                        case \"msg_ratelimit\":\r\n                        case \"msg_subsonly\":\r\n                        case \"msg_timedout\":\r\n                        case \"no_help\":\r\n                        case \"usage_disconnect\":\r\n                        case \"usage_help\":\r\n                        case \"usage_me\":\r\n                            this.log.info(`[${channel}] ${msg}`);\r\n                            this.emit(\"notice\", channel, msgid, msg);\r\n                            break;\r\n\r\n                        // Ignore this because we are already listening to HOSTTARGET..\r\n                        case \"host_on\":\r\n                        case \"host_off\":\r\n                            //\r\n                            break;\r\n\r\n                        default:\r\n                            if (msg.includes(\"Login unsuccessful\") || msg.includes(\"Login authentication failed\")) {\r\n                                this.wasCloseCalled = false;\r\n                                this.reconnect = false;\r\n                                this.reason = msg;\r\n                                this.log.error(this.reason);\r\n                                this.ws.close();\r\n                            }\r\n                            else if (msg.includes(\"Error logging in\") || msg.includes(\"Improperly formatted auth\")) {\r\n                                this.wasCloseCalled = false;\r\n                                this.reconnect = false;\r\n                                this.reason = msg;\r\n                                this.log.error(this.reason);\r\n                                this.ws.close();\r\n                            }\r\n                            else if (msg.includes(\"Invalid NICK\")) {\r\n                                this.wasCloseCalled = false;\r\n                                this.reconnect = false;\r\n                                this.reason = \"Invalid NICK.\";\r\n                                this.log.error(this.reason);\r\n                                this.ws.close();\r\n                            }\r\n                            else {\r\n                                this.log.warn(`Could not parse NOTICE from tmi.twitch.tv:\\n${JSON.stringify(message, null, 4)}`);\r\n                            }\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                // Handle subanniversary / resub..\r\n                case \"USERNOTICE\":\r\n                    if (msgid === \"resub\") {\r\n                        var username = message.tags[\"display-name\"] || message.tags[\"login\"];\r\n                        var plan = message.tags[\"msg-param-sub-plan\"];\r\n                        var planName = _.replaceAll(_.get(message.tags[\"msg-param-sub-plan-name\"], null), {\r\n                            \"\\\\\\\\s\": \" \",\r\n                            \"\\\\\\\\:\": \";\",\r\n                            \"\\\\\\\\\\\\\\\\\": \"\\\\\",\r\n                            \"\\\\r\": \"\\r\",\r\n                            \"\\\\n\": \"\\n\"\r\n                        });\r\n                        var months = _.get(~~message.tags[\"msg-param-months\"], null);\r\n                        var prime = plan.includes(\"Prime\");\r\n                        var userstate = null;\r\n\r\n                        if (msg) {\r\n                            userstate = message.tags;\r\n                            userstate['message-type'] = 'resub';\r\n                        }\r\n\r\n                        this.emits([\"resub\", \"subanniversary\"], [\r\n                            [channel, username, months, msg, userstate, {prime, plan, planName}],\r\n                            [channel, username, months, msg, userstate, {prime, plan, planName}]\r\n                        ]);\r\n                    }\r\n\r\n                    // Handle sub\r\n                    else if (msgid == \"sub\") {\r\n                        var username = message.tags[\"display-name\"] || message.tags[\"login\"];\r\n                        var plan = message.tags[\"msg-param-sub-plan\"];\r\n                        var planName = _.replaceAll(_.get(message.tags[\"msg-param-sub-plan-name\"], null), {\r\n                            \"\\\\\\\\s\": \" \",\r\n                            \"\\\\\\\\:\": \";\",\r\n                            \"\\\\\\\\\\\\\\\\\": \"\\\\\",\r\n                            \"\\\\r\": \"\\r\",\r\n                            \"\\\\n\": \"\\n\"\r\n                        });\r\n                        var prime = plan.includes(\"Prime\");\r\n                        var userstate = null;\r\n\r\n                        if (msg) {\r\n                            userstate = message.tags;\r\n                            userstate['message-type'] = 'sub';\r\n                        }\r\n\r\n                        this.emit(\"subscription\", channel, username, {prime, plan, planName}, msg, userstate);\r\n                    }\r\n                    break;\r\n\r\n                // Channel is now hosting another channel or exited host mode..\r\n                case \"HOSTTARGET\":\r\n                    // Stopped hosting..\r\n                    if (msg.split(\" \")[0] === \"-\") {\r\n                        this.log.info(`[${channel}] Exited host mode.`);\r\n                        this.emits([\"unhost\", \"_promiseUnhost\"], [[channel, ~~msg.split(\" \")[1] || 0], [null]]);\r\n                    }\r\n                    // Now hosting..\r\n                    else {\r\n                        var viewers = ~~msg.split(\" \")[1] || 0;\r\n\r\n                        this.log.info(`[${channel}] Now hosting ${msg.split(\" \")[0]} for ${viewers} viewer(s).`);\r\n                        this.emit(\"hosting\", channel, msg.split(\" \")[0], viewers);\r\n                    }\r\n                    break;\r\n\r\n                // Someone has been timed out or chat has been cleared by a moderator..\r\n                case \"CLEARCHAT\":\r\n                    // User has been banned / timed out by a moderator..\r\n                    if (message.params.length > 1) {\r\n                        // Duration returns null if it's a ban, otherwise it's a timeout..\r\n                        var duration = _.get(message.tags[\"ban-duration\"], null);\r\n\r\n                        // Escaping values: http://ircv3.net/specs/core/message-tags-3.2.html#escaping-values\r\n                        var reason = _.replaceAll(_.get(message.tags[\"ban-reason\"], null), {\r\n                            \"\\\\\\\\s\": \" \",\r\n                            \"\\\\\\\\:\": \";\",\r\n                            \"\\\\\\\\\\\\\\\\\": \"\\\\\",\r\n                            \"\\\\r\": \"\\r\",\r\n                            \"\\\\n\": \"\\n\"\r\n                        });\r\n\r\n                        if (_.isNull(duration)) {\r\n                            this.log.info(`[${channel}] ${msg} has been banned. Reason: ${reason || \"n/a\"}`);\r\n                            this.emit(\"ban\", channel, msg, reason);\r\n                        } else {\r\n                            this.log.info(`[${channel}] ${msg} has been timed out for ${duration} seconds. Reason: ${reason || \"n/a\"}`);\r\n                            this.emit(\"timeout\", channel, msg, reason, ~~duration);\r\n                        }\r\n                    }\r\n                    // Chat was cleared by a moderator..\r\n                    else {\r\n                        this.log.info(`[${channel}] Chat was cleared by a moderator.`);\r\n                        this.emits([\"clearchat\", \"_promiseClear\"], [[channel], [null]]);\r\n                    }\r\n                    break;\r\n\r\n                // Received a reconnection request from the server..\r\n                case \"RECONNECT\":\r\n                    this.log.info(\"Received RECONNECT request from Twitch..\");\r\n                    this.log.info(`Disconnecting and reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\r\n                    this.disconnect();\r\n                    setTimeout(() => { this.connect(); }, this.reconnectTimer);\r\n                    break;\r\n\r\n                // Wrong cluster..\r\n                case \"SERVERCHANGE\":\r\n                    //\r\n                    break;\r\n\r\n                // Received when joining a channel and every time you send a PRIVMSG to a channel.\r\n                case \"USERSTATE\":\r\n                    message.tags.username = this.username;\r\n\r\n                    // Add the client to the moderators of this room..\r\n                    if (message.tags[\"user-type\"] === \"mod\") {\r\n                        if (!this.moderators[this.lastJoined]) { this.moderators[this.lastJoined] = []; }\r\n                        if (this.moderators[this.lastJoined].indexOf(this.username) < 0) { this.moderators[this.lastJoined].push(this.username); }\r\n                    }\r\n\r\n                    // Logged in and username doesn't start with justinfan..\r\n                    if (!_.isJustinfan(this.getUsername()) && !this.userstate[channel]) {\r\n                        this.userstate[channel] = message.tags;\r\n                        this.lastJoined = channel;\r\n                        this.channels.push(channel);\r\n                        this.log.info(`Joined ${channel}`);\r\n                        this.emit(\"join\", channel, _.username(this.getUsername()), true);\r\n                    }\r\n\r\n                    // Emote-sets has changed, update it..\r\n                    if (message.tags[\"emote-sets\"] !== this.emotes) {\r\n                        this._updateEmoteset(message.tags[\"emote-sets\"]);\r\n                    }\r\n\r\n                    this.userstate[channel] = message.tags;\r\n                    break;\r\n\r\n                // Describe non-channel-specific state informations..\r\n                case \"GLOBALUSERSTATE\":\r\n                    this.globaluserstate = message.tags;\r\n\r\n                    // Received emote-sets..\r\n                    if (typeof message.tags[\"emote-sets\"] !== \"undefined\") {\r\n                        this._updateEmoteset(message.tags[\"emote-sets\"]);\r\n                    }\r\n                    break;\r\n\r\n                // Received when joining a channel and every time one of the chat room settings, like slow mode, change.\r\n                // The message on join contains all room settings.\r\n                case \"ROOMSTATE\":\r\n                    // We use this notice to know if we successfully joined a channel..\r\n                    if (_.channel(this.lastJoined) === _.channel(message.params[0])) { this.emit(\"_promiseJoin\", null); }\r\n\r\n                    // Provide the channel name in the tags before emitting it..\r\n                    message.tags.channel = _.channel(message.params[0]);\r\n                    this.emit(\"roomstate\", _.channel(message.params[0]), message.tags);\r\n\r\n                    // Handle slow mode here instead of the slow_on/off notice..\r\n                    // This room is now in slow mode. You may send messages every slow_duration seconds.\r\n                    if (message.tags.hasOwnProperty(\"slow\") && !message.tags.hasOwnProperty(\"subs-only\")) {\r\n                        if (typeof message.tags.slow === \"boolean\") {\r\n                            this.log.info(`[${channel}] This room is no longer in slow mode.`);\r\n                            this.emits([\"slow\", \"slowmode\", \"_promiseSlowoff\"], [[channel, false, 0], [channel, false, 0], [null]]);\r\n                        } else {\r\n                            this.log.info(`[${channel}] This room is now in slow mode.`);\r\n                            this.emits([\"slow\", \"slowmode\", \"_promiseSlow\"], [[channel, true, ~~message.tags.slow], [channel, true, ~~message.tags.slow], [null]]);\r\n                        }\r\n                    }\r\n\r\n                    // Handle followers only mode here instead of the followers_on/off notice..\r\n                    // This room is now in follower-only mode.\r\n                    // This room is now in <duration> followers-only mode.\r\n                    // This room is no longer in followers-only mode.\r\n                    // duration is in minutes (string)\r\n                    // -1 when /followersoff (string)\r\n                    // false when /followers with no duration (boolean)\r\n                    if (message.tags.hasOwnProperty(\"followers-only\") && !message.tags.hasOwnProperty(\"subs-only\")) {\r\n                        if (message.tags[\"followers-only\"] === \"-1\") {\r\n                            this.log.info(`[${channel}] This room is no longer in followers-only mode.`);\r\n                            this.emits([\"followersonly\", \"followersmode\", \"_promiseFollowersoff\"], [[channel, false, 0], [channel, false, 0], [null]]);\r\n                        } else {\r\n                            var minutes = ~~message.tags[\"followers-only\"];\r\n                            this.log.info(`[${channel}] This room is now in follower-only mode.`);\r\n                            this.emits([\"followersonly\", \"followersmode\", \"_promiseFollowers\"], [[channel, true, minutes], [channel, true, minutes], [null]]);\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    this.log.warn(`Could not parse message from tmi.twitch.tv:\\n${JSON.stringify(message, null, 4)}`);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Messages from jtv..\r\n        else if (message.prefix === \"jtv\") {\r\n            switch(message.command) {\r\n                case \"MODE\":\r\n                    if (msg === \"+o\") {\r\n                        // Add username to the moderators..\r\n                        if (!this.moderators[channel]) { this.moderators[channel] = []; }\r\n                        if (this.moderators[channel].indexOf(message.params[2]) < 0) { this.moderators[channel].push(message.params[2]); }\r\n\r\n                        this.emit(\"mod\", channel, message.params[2]);\r\n                    }\r\n                    else if (msg === \"-o\") {\r\n                        // Remove username from the moderators..\r\n                        if (!this.moderators[channel]) { this.moderators[channel] = []; }\r\n                        this.moderators[channel].filter((value) => { return value != message.params[2]; });\r\n\r\n                        this.emit(\"unmod\", channel, message.params[2]);\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    this.log.warn(`Could not parse message from jtv:\\n${JSON.stringify(message, null, 4)}`);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Anything else..\r\n        else {\r\n            switch(message.command) {\r\n                case \"353\":\r\n                    this.emit(\"names\", message.params[2], message.params[3].split(\" \"));\r\n                    break;\r\n\r\n                case \"366\":\r\n                    break;\r\n\r\n                // Someone has joined the channel..\r\n                case \"JOIN\":\r\n                    // Joined a channel as a justinfan (anonymous) user..\r\n                    if (_.isJustinfan(this.getUsername()) && this.username === message.prefix.split(\"!\")[0]) {\r\n                        this.lastJoined = channel;\r\n                        this.channels.push(channel);\r\n                        this.log.info(`Joined ${channel}`);\r\n                        this.emit(\"join\", channel, message.prefix.split(\"!\")[0], true);\r\n                    }\r\n\r\n                    // Someone else joined the channel, just emit the join event..\r\n                    if (this.username !== message.prefix.split(\"!\")[0]) {\r\n                        this.emit(\"join\", channel, message.prefix.split(\"!\")[0], false);\r\n                    }\r\n                    break;\r\n\r\n                // Someone has left the channel..\r\n                case \"PART\":\r\n                    var isSelf = false;\r\n                    // Client a channel..\r\n                    if (this.username === message.prefix.split(\"!\")[0]) {\r\n                        isSelf = true;\r\n                        if (this.userstate[channel]) { delete this.userstate[channel]; }\r\n\r\n                        var index = this.channels.indexOf(channel);\r\n                        if (index !== -1) { this.channels.splice(index, 1); }\r\n\r\n                        var index = this.opts.channels.indexOf(channel);\r\n                        if (index !== -1) { this.opts.channels.splice(index, 1); }\r\n\r\n                        this.log.info(`Left ${channel}`);\r\n                        this.emit(\"_promisePart\", null);\r\n                    }\r\n\r\n                    // Client or someone else left the channel, emit the part event..\r\n                    this.emit(\"part\", channel, message.prefix.split(\"!\")[0], isSelf);\r\n                    break;\r\n\r\n                // Received a whisper..\r\n                case \"WHISPER\":\r\n                    this.log.info(`[WHISPER] <${message.prefix.split(\"!\")[0]}>: ${msg}`);\r\n\r\n                    // Update the tags to provide the username..\r\n                    if (!message.tags.hasOwnProperty(\"username\")) { message.tags.username = message.prefix.split(\"!\")[0]; }\r\n                    message.tags[\"message-type\"] = \"whisper\";\r\n\r\n                    var from = _.channel(message.tags.username);\r\n                    // Emit for both, whisper and message..\r\n                    this.emits([\"whisper\", \"message\"], [\r\n                        [from, message.tags, msg, false],\r\n                        [from, message.tags, msg, false]\r\n                    ]);\r\n                    break;\r\n\r\n                case \"PRIVMSG\":\r\n                    // Add username (lowercase) to the tags..\r\n                    message.tags.username = message.prefix.split(\"!\")[0];\r\n\r\n                    // Message from JTV..\r\n                    if (message.tags.username === \"jtv\") {\r\n                        // Someone is hosting the channel and the message contains how many viewers..\r\n                        if (msg.includes(\"hosting you for\")) {\r\n                            var count = _.extractNumber(msg);\r\n\r\n                            this.emit(\"hosted\", channel, _.username(msg.split(\" \")[0]), count, msg.includes(\"auto\"));\r\n                        }\r\n\r\n                        // Some is hosting the channel, but no viewer(s) count provided in the message..\r\n                        else if (msg.includes(\"hosting you\")) {\r\n                            this.emit(\"hosted\", channel, _.username(msg.split(\" \")[0]), 0, msg.includes(\"auto\"));\r\n                        }\r\n                    }\r\n\r\n                    else {\r\n                        // Message is an action (/me <message>)..\r\n                        if (msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)) {\r\n                            message.tags[\"message-type\"] = \"action\";\r\n                            this.log.info(`[${channel}] *<${message.tags.username}>: ${msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1]}`);\r\n                            this.emits([\"action\", \"message\"], [\r\n                                [channel, message.tags, msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1], false],\r\n                                [channel, message.tags, msg.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1], false]\r\n                            ]);\r\n                        }\r\n                        else {\r\n                            if (message.tags.hasOwnProperty(\"bits\")) {\r\n                                this.emit(\"cheer\", channel, message.tags, msg);\r\n                            }\r\n\r\n                            // Message is a regular chat message..\r\n                            else {\r\n                                message.tags[\"message-type\"] = \"chat\";\r\n                                this.log.info(`[${channel}] <${message.tags.username}>: ${msg}`);\r\n\r\n                                this.emits([\"chat\", \"message\"], [\r\n                                    [channel, message.tags, msg, false],\r\n                                    [channel, message.tags, msg, false]\r\n                                ]);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    this.log.warn(`Could not parse message:\\n${JSON.stringify(message, null, 4)}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// Connect to server..\r\nclient.prototype.connect = function connect() {\r\n    return new Promise((resolve, reject) => {\r\n        this.server = _.get(this.opts.connection.server, \"irc-ws.chat.twitch.tv\");\r\n        this.port = _.get(this.opts.connection.port, 80);\r\n\r\n        // Override port if using a secure connection..\r\n        if (this.secure) { this.port = 443; }\r\n        if (this.port === 443) { this.secure = true; }\r\n\r\n        this.reconnectTimer = this.reconnectTimer * this.reconnectDecay;\r\n        if (this.reconnectTimer >= this.maxReconnectInterval) {\r\n            this.reconnectTimer = this.maxReconnectInterval;\r\n        }\r\n\r\n        // Connect to server from configuration..\r\n        this._openConnection();\r\n        this.once(\"_promiseConnect\", (err) => {\r\n            if (!err) { resolve([this.server, ~~this.port]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n};\r\n\r\n// Open a connection..\r\nclient.prototype._openConnection = function _openConnection() {\r\n    this.ws = new ws(`${this.secure ? \"wss\" : \"ws\"}://${this.server}:${this.port}/`, \"irc\");\r\n\r\n    this.ws.onmessage = this._onMessage.bind(this);\r\n    this.ws.onerror = this._onError.bind(this);\r\n    this.ws.onclose = this._onClose.bind(this);\r\n    this.ws.onopen = this._onOpen.bind(this);\r\n};\r\n\r\n// Called when the WebSocket connection's readyState changes to OPEN.\r\n// Indicates that the connection is ready to send and receive data..\r\nclient.prototype._onOpen = function _onOpen() {\r\n    if (!_.isNull(this.ws) && this.ws.readyState === 1) {\r\n        // Emitting \"connecting\" event..\r\n        this.log.info(`Connecting to ${this.server} on port ${this.port}..`);\r\n        this.emit(\"connecting\", this.server, ~~this.port);\r\n\r\n        this.username = _.get(this.opts.identity.username, _.justinfan());\r\n        this.password = _.password(_.get(this.opts.identity.password, \"SCHMOOPIIE\"));\r\n\r\n        // Emitting \"logon\" event..\r\n        this.log.info(\"Sending authentication to server..\");\r\n        this.emit(\"logon\");\r\n\r\n        // Authentication..\r\n        this.ws.send(\"CAP REQ :twitch.tv/tags twitch.tv/commands twitch.tv/membership\");\r\n        this.ws.send(`PASS ${this.password}`);\r\n        this.ws.send(`NICK ${this.username}`);\r\n        this.ws.send(`USER ${this.username} 8 * :${this.username}`);\r\n    }\r\n};\r\n\r\n// Called when a message is received from the server..\r\nclient.prototype._onMessage = function _onMessage(event) {\r\n    var parts = event.data.split(\"\\r\\n\");\r\n\r\n    parts.forEach((str) => {\r\n        if (!_.isNull(str)) { this.handleMessage(parse.msg(str)); }\r\n    });\r\n};\r\n\r\n// Called when an error occurs..\r\nclient.prototype._onError = function _onError() {\r\n    this.moderators = {};\r\n    this.userstate = {};\r\n    this.globaluserstate = {};\r\n\r\n    // Stop the internal ping timeout check interval..\r\n    clearInterval(this.pingLoop);\r\n    clearTimeout(this.pingTimeout);\r\n\r\n    this.reason = !_.isNull(this.ws) ? \"Unable to connect.\" : \"Connection closed.\";\r\n\r\n    this.emits([\"_promiseConnect\", \"disconnected\"], [[this.reason], [this.reason]]);\r\n\r\n    // Reconnect to server..\r\n    if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {\r\n        this.emit(\"maxreconnect\");\r\n        this.log.error(\"Maximum reconnection attempts reached.\");\r\n    }\r\n    if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts-1) {\r\n        this.reconnecting = true;\r\n        this.reconnections = this.reconnections+1;\r\n        this.log.error(`Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\r\n        this.emit(\"reconnect\");\r\n        setTimeout(() => { this.reconnecting = false; this.connect(); }, this.reconnectTimer);\r\n    }\r\n\r\n    this.ws = null;\r\n};\r\n\r\n// Called when the WebSocket connection's readyState changes to CLOSED..\r\nclient.prototype._onClose = function _onClose() {\r\n    this.moderators = {};\r\n    this.userstate = {};\r\n    this.globaluserstate = {};\r\n\r\n    // Stop the internal ping timeout check interval..\r\n    clearInterval(this.pingLoop);\r\n    clearTimeout(this.pingTimeout);\r\n\r\n    // User called .disconnect(), don't try to reconnect.\r\n    if (this.wasCloseCalled) {\r\n        this.wasCloseCalled = false;\r\n        this.reason = \"Connection closed.\";\r\n        this.log.info(this.reason);\r\n        this.emits([\"_promiseConnect\", \"_promiseDisconnect\", \"disconnected\"], [[this.reason], [null], [this.reason]]);\r\n    }\r\n    // Got disconnected from server..\r\n    else {\r\n        this.emits([\"_promiseConnect\", \"disconnected\"], [[this.reason], [this.reason]]);\r\n\r\n        // Reconnect to server..\r\n        if (this.reconnect && this.reconnections === this.maxReconnectAttempts) {\r\n            this.emit(\"maxreconnect\");\r\n            this.log.error(\"Maximum reconnection attempts reached.\");\r\n        }\r\n        if (this.reconnect && !this.reconnecting && this.reconnections <= this.maxReconnectAttempts-1) {\r\n            this.reconnecting = true;\r\n            this.reconnections = this.reconnections+1;\r\n            this.log.error(`Could not connect to server. Reconnecting in ${Math.round(this.reconnectTimer / 1000)} seconds..`);\r\n            this.emit(\"reconnect\");\r\n            setTimeout(() => { this.reconnecting = false; this.connect(); }, this.reconnectTimer);\r\n        }\r\n    }\r\n\r\n    this.ws = null;\r\n};\r\n\r\n// Minimum of 600ms for command promises, if current latency exceeds, add 100ms to it to make sure it doesn't get timed out..\r\nclient.prototype._getPromiseDelay = function _getPromiseDelay() {\r\n    if (this.currentLatency <= 600) { return 600; }\r\n    else { return this.currentLatency + 100; }\r\n};\r\n\r\n// Send command to server or channel..\r\nclient.prototype._sendCommand = function _sendCommand(delay, channel, command, fn) {\r\n    // Race promise against delay..\r\n    return new Promise((resolve, reject) => {\r\n        _.promiseDelay(delay).then(() => { reject(\"No response from Twitch.\"); });\r\n\r\n        // Make sure the socket is opened..\r\n        if (!_.isNull(this.ws) && this.ws.readyState !== 2 && this.ws.readyState !== 3) {\r\n            // Executing a command on a channel..\r\n            if (!_.isNull(channel)) {\r\n                this.log.info(`[${_.channel(channel)}] Executing command: ${command}`);\r\n                this.ws.send(`PRIVMSG ${_.channel(channel)} :${command}`);\r\n            }\r\n\r\n            // Executing a raw command..\r\n            else {\r\n                this.log.info(`Executing command: ${command}`);\r\n                this.ws.send(command);\r\n            }\r\n            fn(resolve, reject);\r\n        }\r\n\r\n        // Disconnected from server..\r\n        else { reject(\"Not connected to server.\"); }\r\n    });\r\n};\r\n\r\n// Send a message to channel..\r\nclient.prototype._sendMessage = function _sendMessage(delay, channel, message, fn) {\r\n    // Promise a result..\r\n    return new Promise((resolve, reject) => {\r\n        // Make sure the socket is opened and not logged in as a justinfan user..\r\n        if (!_.isNull(this.ws) && this.ws.readyState !== 2 && this.ws.readyState !== 3 && !_.isJustinfan(this.getUsername())) {\r\n            if (!this.userstate[_.channel(channel)]) { this.userstate[_.channel(channel)] = {} }\r\n\r\n            // Split long lines otherwise they will be eaten by the server..\r\n            if (message.length >= 500) {\r\n                var msg = _.splitLine(message, 500);\r\n                message = msg[0];\r\n\r\n                setTimeout(() => {\r\n                    this._sendMessage(delay, channel, msg[1], () => {});\r\n                }, 350);\r\n            }\r\n\r\n            this.ws.send(`PRIVMSG ${_.channel(channel)} :${message}`);\r\n\r\n            var emotes = {};\r\n\r\n            // Parse regex and string emotes..\r\n            Object.keys(this.emotesets).forEach((id) => {\r\n                this.emotesets[id].forEach(function(emote) {\r\n                    if (_.isRegex(emote.code)) { return parse.emoteRegex(message, emote.code, emote.id, emotes); }\r\n                    parse.emoteString(message, emote.code, emote.id, emotes);\r\n                });\r\n            });\r\n\r\n            // Merge userstate with parsed emotes..\r\n            var userstate = _.merge(this.userstate[_.channel(channel)], parse.emotes({ emotes: parse.transformEmotes(emotes) || null }));\r\n\r\n            // Message is an action (/me <message>)..\r\n            if (message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)) {\r\n                userstate[\"message-type\"] = \"action\";\r\n                this.log.info(`[${_.channel(channel)}] *<${this.getUsername()}>: ${message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1]}`);\r\n                this.emits([\"action\", \"message\"], [\r\n                    [_.channel(channel), userstate, message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1], true],\r\n                    [_.channel(channel), userstate, message.match(/^\\u0001ACTION ([^\\u0001]+)\\u0001$/)[1], true]\r\n                ]);\r\n            }\r\n\r\n            // Message is a regular chat message..\r\n            else {\r\n                userstate[\"message-type\"] = \"chat\";\r\n                this.log.info(`[${_.channel(channel)}] <${this.getUsername()}>: ${message}`);\r\n                this.emits([\"chat\", \"message\"], [\r\n                    [_.channel(channel), userstate, message, true],\r\n                    [_.channel(channel), userstate, message, true]\r\n                ]);\r\n            }\r\n            fn(resolve, reject);\r\n        } else {\r\n            reject(\"Not connected to server.\");\r\n        }\r\n    });\r\n};\r\n\r\n// Grab the emote-sets object from the API..\r\nclient.prototype._updateEmoteset = function _updateEmoteset(sets) {\r\n    this.emotes = sets;\r\n\r\n    this.api({\r\n        url: `/chat/emoticon_images?emotesets=${sets}`,\r\n        headers: {\r\n            \"Authorization\": `OAuth ${_.password(_.get(this.opts.identity.password, \"\")).replace(\"oauth:\", \"\")}`,\r\n            \"Client-ID\": this.clientId\r\n        }\r\n    }, (err, res, body) => {\r\n        if (!err) {\r\n            this.emotesets = body[\"emoticon_sets\"] || {};\r\n            return this.emit(\"emotesets\", sets, this.emotesets);\r\n        }\r\n        setTimeout(() => { this._updateEmoteset(sets); }, 60000);\r\n    });\r\n};\r\n\r\n// Get current username..\r\nclient.prototype.getUsername = function getUsername() {\r\n    return this.username;\r\n};\r\n\r\n// Get current options..\r\nclient.prototype.getOptions = function getOptions() {\r\n    return this.opts;\r\n};\r\n\r\n// Get current channels..\r\nclient.prototype.getChannels = function getChannels() {\r\n    return this.channels;\r\n};\r\n\r\n// Check if username is a moderator on a channel..\r\nclient.prototype.isMod = function isMod(channel, username) {\r\n    if (!this.moderators[_.channel(channel)]) { this.moderators[_.channel(channel)] = []; }\r\n    if (this.moderators[_.channel(channel)].indexOf(_.username(username)) >= 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\n// Get readyState..\r\nclient.prototype.readyState = function readyState() {\r\n    if (_.isNull(this.ws)) { return \"CLOSED\"; }\r\n    return [\"CONNECTING\", \"OPEN\", \"CLOSING\", \"CLOSED\"][this.ws.readyState];\r\n};\r\n\r\n// Disconnect from server..\r\nclient.prototype.disconnect = function disconnect() {\r\n    return new Promise((resolve, reject) => {\r\n        if (!_.isNull(this.ws) && this.ws.readyState !== 3) {\r\n            this.wasCloseCalled = true;\r\n            this.log.info(\"Disconnecting from server..\");\r\n            this.ws.close();\r\n            this.once(\"_promiseDisconnect\", () => { resolve([this.server, ~~this.port]); });\r\n        } else {\r\n            this.log.error(\"Cannot disconnect from server. Socket is not opened or connection is already closing.\");\r\n            reject(\"Cannot disconnect from server. Socket is not opened or connection is already closing.\");\r\n        }\r\n    });\r\n};\r\n\r\nclient.prototype.utils = {\r\n    levenshtein: function levenshtein(s1, s2, caseSensitive) {\r\n        var cost_ins = 1;\r\n        var cost_rep = 1;\r\n        var cost_del = 1;\r\n        caseSensitive = _.get(caseSensitive, false);\r\n\r\n        if (!caseSensitive) {\r\n            s1 = s1.toLowerCase();\r\n            s2 = s2.toLowerCase();\r\n        }\r\n\r\n        if (s1 == s2) { return 0; }\r\n\r\n        var l1 = s1.length;\r\n        var l2 = s2.length;\r\n\r\n        if (l1 === 0) { return l2 * cost_ins; }\r\n        if (l2 === 0) { return l1 * cost_del; }\r\n\r\n        var split = false;\r\n        try {\r\n            split = !(\"0\")[0];\r\n        } catch (e) {\r\n            split = true;\r\n        }\r\n        if (split) {\r\n            s1 = s1.split(\"\");\r\n            s2 = s2.split(\"\");\r\n        }\r\n\r\n        var p1 = new Array(l2 + 1);\r\n        var p2 = new Array(l2 + 1);\r\n\r\n        var i1, i2, c0, c1, c2, tmp;\r\n\r\n        for (i2 = 0; i2 <= l2; i2++) {\r\n            p1[i2] = i2 * cost_ins;\r\n        }\r\n\r\n        for (i1 = 0; i1 < l1; i1++) {\r\n            p2[0] = p1[0] + cost_del;\r\n\r\n            for (i2 = 0; i2 < l2; i2++) {\r\n                c0 = p1[i2] + ((s1[i1] == s2[i2]) ? 0 : cost_rep);\r\n                c1 = p1[i2 + 1] + cost_del;\r\n\r\n                if (c1 < c0) {\r\n                    c0 = c1;\r\n                }\r\n\r\n                c2 = p2[i2] + cost_ins;\r\n\r\n                if (c2 < c0) {\r\n                    c0 = c2;\r\n                }\r\n\r\n                p2[i2 + 1] = c0;\r\n            }\r\n\r\n            tmp = p1;\r\n            p1 = p2;\r\n            p2 = tmp;\r\n        }\r\n\r\n        c0 = p1[l2];\r\n\r\n        return c0;\r\n    },\r\n    raffle: {\r\n        init: function init(channel) {\r\n            if (!this.raffleChannels) { this.raffleChannels = {}; }\r\n            if (!this.raffleChannels[_.channel(channel)]) { this.raffleChannels[_.channel(channel)] = []; }\r\n        },\r\n        enter: function enter(channel, username) {\r\n            this.init(channel);\r\n            this.raffleChannels[_.channel(channel)].push(username.toLowerCase());\r\n        },\r\n        leave: function leave(channel, username) {\r\n            this.init(channel);\r\n            var index = this.raffleChannels[_.channel(channel)].indexOf(_.username(username));\r\n            if (index >= 0) {\r\n                this.raffleChannels[_.channel(channel)].splice(index, 1);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        pick: function pick(channel) {\r\n            this.init(channel);\r\n            var count = this.raffleChannels[_.channel(channel)].length;\r\n            if (count >= 1) {\r\n                return this.raffleChannels[_.channel(channel)][Math.floor((Math.random() * count))];\r\n            }\r\n            return null;\r\n        },\r\n        reset: function reset(channel) {\r\n            this.init(channel);\r\n            this.raffleChannels[_.channel(channel)] = [];\r\n        },\r\n        count: function count(channel) {\r\n            this.init(channel);\r\n            if (this.raffleChannels[_.channel(channel)]) {\r\n                return this.raffleChannels[_.channel(channel)].length;\r\n            }\r\n            return 0;\r\n        },\r\n        isParticipating: function isParticipating(channel, username) {\r\n            this.init(channel);\r\n            if (this.raffleChannels[_.channel(channel)].indexOf(_.username(username)) >= 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    symbols: function symbols(line) {\r\n        var count = 0;\r\n        for (var i = 0; i < line.length; i++) {\r\n            var charCode = line.substring(i, i+1).charCodeAt(0);\r\n            if ((charCode <= 30 || charCode >= 127) || charCode === 65533) {\r\n                count++;\r\n            }\r\n        }\r\n        return Math.ceil((count / line.length) * 100) / 100;\r\n    },\r\n    uppercase: function uppercase(line) {\r\n        var chars = line.length;\r\n        var u_let = line.match(/[A-Z]/g);\r\n        if (!_.isNull(u_let)) {\r\n            return (u_let.length / chars);\r\n        }\r\n        return 0;\r\n    }\r\n};\r\n\r\n// Expose everything, for browser and Node..\r\nif (typeof module !== \"undefined\" && module.exports) {\r\n    module.exports = client;\r\n}\r\nif (typeof window !== \"undefined\") {\r\n    window.tmi = {};\r\n    window.tmi.client = client;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/client.js\n// module id = 2\n// module chunks = 0","import {Component, h, render} from 'preact';\r\nimport CrossWords from './component/crosswords';\r\nimport tmi from 'tmi.js';\r\nimport {config} from \"./config\";\r\nimport data from \"./data/crosswords.json\"\r\n\r\nclass Main extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.chat = this.chat.bind(this);\r\n        this.setState({\r\n            word: null,\r\n            crossword: null\r\n        });\r\n        this.initCrossWord();\r\n        let that = this;\r\n\r\n        //tmi.js twitch client. https://docs.tmijs.org/\r\n        let client = new tmi.client({\r\n            options: {\r\n                debug: false\r\n            },\r\n            connection: {\r\n                reconnect: true\r\n            },\r\n            identity: {\r\n                username: config.username,\r\n                password: config.password\r\n            },\r\n            channels: [config.channel]\r\n        });\r\n        this.setState({client: client});\r\n\r\n        //tmi.js twitch client. https://docs.tmijs.org/v1.2.1/Configuration.html\r\n        this.state.client.connect();\r\n\r\n        //tmi.js twitch client. https://docs.tmijs.org/v1.2.1/Events.html#message\r\n        this.state.client.on(\"message\", function (channel, userstate, message) {\r\n\r\n            //Verify if is: chat; no: whisper, action;\r\n            if (userstate[\"message-type\"] === \"chat\") {\r\n                that.chat(message, userstate);\r\n            }\r\n            return true;\r\n        })\r\n    }\r\n\r\n    chat(message, userstate) {\r\n        let username = userstate[\"username\"];\r\n        let displayName = userstate[\"display-name\"];\r\n\r\n        let [num, string, other] = message.split(\" \");\r\n        num--;\r\n\r\n        if (!isNaN(num)) {\r\n        //Check if message is like: {int} ...\r\n\r\n            if (typeof string === \"undefined\") {\r\n            //Check if message like: {int}\r\n\r\n                if (typeof this.state.crossword[num] !== \"undefined\"){\r\n                    let chat = \" \" + (num + 1) + \": \" + this.state.crossword[num][1];\r\n                    this.state.client.say(config.channel, displayName + chat);\r\n                }\r\n\r\n            } else if (typeof string === \"string\" && typeof other === \"undefined\") {\r\n                //Check if message like: {int} {string}\r\n\r\n                if (typeof this.state.crossword[num] !== \"undefined\"){\r\n                    let chat;\r\n\r\n                    if (this.state.crossword[num][0].toUpperCase() === string.toUpperCase()) {\r\n                        //If is the good word.\r\n\r\n                        if (this.state.crossword[num][4] === false) {\r\n                            chat = \" a trouvé le mot numéro \" + (num+1) + \", bien joué.\";\r\n                            this.state.crossword[num][4] = true;\r\n                        } else {\r\n                            chat = \" ce mot à déja été trouvé.\"\r\n                        }\r\n\r\n                        this.setState({word: string});\r\n                    } else {\r\n                        //If is bad word.\r\n\r\n                        chat = \" dommage, essaie encore.\";\r\n                    }\r\n                    this.state.client.say(config.channel, displayName + chat);\r\n                }\r\n\r\n            }\r\n\r\n        }else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n    componentDidMount() {\r\n        let that = this;\r\n        setTimeout(function () {\r\n            that.setState({word: \"amalgame\"});\r\n        }, 500);        setTimeout(function () {\r\n            that.setState({word: \"salut\"});\r\n        }, 1000);\r\n        setTimeout(function () {\r\n            that.setState({word: \"test\"});\r\n        }, 1500);\r\n        setTimeout(function () {\r\n            that.setState({word: \"manger\"});\r\n        }, 2000);\r\n        setTimeout(function () {\r\n            that.setState({word: \"liste\"});\r\n        }, 2500);\r\n    }\r\n    */\r\n\r\n    render() {\r\n        return <CrossWords crossword={this.state.crossword} word={this.state.word} />\r\n    }\r\n\r\n    initCrossWord() {\r\n        this.setState({crossword: data.crosswords[0]})\r\n    }\r\n}\r\n\r\nrender(<Main />, document.body);\n\n\n// WEBPACK FOOTER //\n// ./main.js","import { h, Component } from \"preact\";\r\n\r\nexport default class crosswords extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.addingWord = this.addingWord.bind(this);\r\n        this.state = {\r\n            template: [\r\n                         /*1    2    3    4    5    6    7    8    9   10   11   12   13*/\r\n                /* 1  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 2  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 3  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 4  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 5  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 6  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 7  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 8  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 9  */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 10 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 11 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 12 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 13 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 14 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 15 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 16 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 17 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 18 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 19 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n                /* 20 */ [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\r\n            ],\r\n            words: null\r\n        };\r\n        this.initialise();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({word: nextProps.word});\r\n        this.addingWord(nextProps.word);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    {this.renderTemplate()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    renderTemplate() {\r\n        let tpl = this.state.template;\r\n        let tr = [];\r\n        tpl.forEach(function (rows, y) {\r\n            let td = [];\r\n            rows.forEach(function (char, x) {\r\n                if (char === \" \") {\r\n                    td.push(<td class=\"blank\" id={x + \"_\" + y}>{char}</td>);\r\n                } else if (!isNaN(char)) {\r\n                    td.push(<td class=\"number\" id={x + \"_\" + y}>{char}</td>);\r\n                } else {\r\n                    td.push(<td class=\"letter\" id={x + \"_\" + y} style=\"color: #777779\">{char}</td>);\r\n                }\r\n            });\r\n            tr.push(<tr>{td}</tr>);\r\n        });\r\n        return tr;\r\n    }\r\n\r\n    addingWord(word) {\r\n        let crossword = this.state.words;\r\n        crossword.forEach(function (element) {\r\n           if (element[0].toUpperCase() === word.toUpperCase()) {\r\n               let letters_positions = element[3];\r\n               letters_positions.forEach(function(letters_position) {\r\n                   let [y, x] = letters_position.split(\":\");\r\n                   y--; x--;\r\n                   document.getElementById(x + \"_\" + y).style.color = \"white\";\r\n               });\r\n           }\r\n        });\r\n    }\r\n\r\n    initialise() {\r\n        let template = this.state.template;\r\n        let crossword = this.props.crossword;\r\n        this.setState({words: crossword});\r\n\r\n        crossword.forEach(function (element, index) {\r\n            let number = element[2];\r\n            let [y, x] = number.split(\":\");\r\n            template[y-1][x-1] = index + 1;\r\n\r\n            let word = element[0].split(\"\");\r\n            let letters_positions = element[3];\r\n            letters_positions.forEach(function(letters_position, k) {\r\n                let [y, x] = letters_position.split(\":\");\r\n                template[y-1][x-1] = word[k];\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./component/crosswords.jsx","// Provide support for < Chrome 41 mainly due to CLR Browser..\r\nString.prototype.includes || (String.prototype.includes = function() {\r\n    return -1 !== String.prototype.indexOf.apply(this, arguments)\r\n}), String.prototype.startsWith || (String.prototype.startsWith = function(a, b) {\r\n    return b = b || 0, this.indexOf(a, b) === b\r\n}), Object.setPrototypeOf || (Object.setPrototypeOf = function(obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n});\r\n\r\nmodule.exports={\r\n\tclient:require(\"./lib/client\"),\r\n\tClient:require(\"./lib/client\")\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/index.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0","var request = require(\"request\");\r\nvar _ = require(\"./utils\");\r\n\r\nvar api = function api(options, callback) {\r\n    // Set the url to options.uri or options.url..\r\n    var url = _.get(options.url, null) === null ? _.get(options.uri, null) : _.get(options.url, null);\r\n\r\n    // Make sure it is a valid url..\r\n    if (!_.isURL(url)) { url = url.charAt(0) === \"/\" ? `https://api.twitch.tv/kraken${url}` : `https://api.twitch.tv/kraken/${url}`; }\r\n\r\n    // We are inside a Node application, so we can use the request module..\r\n    if (_.isNode()) {\r\n        request(_.merge(options, { url: url, method: \"GET\", json: true }), function (err, res, body) {\r\n            callback(err, res, body);\r\n        });\r\n    }\r\n    // Inside an extension -> we cannot use jsonp!\r\n    else if (_.isExtension()) {\r\n      options = _.merge(options, { url: url, method: \"GET\", headers: {} })\r\n      // prepare request\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open(options.method, options.url, true);\r\n      for(var name in options.headers) {\r\n        xhr.setRequestHeader(name, options.headers[name]);\r\n      }\r\n      xhr.responseType = \"json\";\r\n      // set request handler\r\n      xhr.addEventListener(\"load\", (ev) => {\r\n        if(xhr.readyState == 4) {\r\n          if(xhr.status != 200) {\r\n            callback(xhr.status, null, null);\r\n          } else {\r\n            callback(null, null, xhr.response);\r\n          }\r\n        }\r\n      });\r\n      // submit\r\n      xhr.send();\r\n    }\r\n    // Inside a web application, use jsonp..\r\n    else {\r\n        // Callbacks must match the regex [a-zA-Z_$][\\w$]*(\\.[a-zA-Z_$][\\w$]*)*\r\n        var callbackName = `jsonp_callback_${Math.round(100000 * Math.random())}`;\r\n        window[callbackName] = function(data) {\r\n            delete window[callbackName];\r\n            document.body.removeChild(script);\r\n            callback(null, null, data);\r\n        };\r\n\r\n        // Inject the script in the document..\r\n        var script = document.createElement(\"script\");\r\n        script.src = `${url}${url.indexOf(\"?\") >= 0 ? \"&\" : \"?\"}callback=${callbackName}`;\r\n        document.body.appendChild(script);\r\n    }\r\n}\r\n\r\nmodule.exports = api;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/api.js\n// module id = 7\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// request (ignored)\n// module id = 8\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 9\n// module chunks = 0","var _ = require(\"./utils\");\r\n\r\n// Enable followers-only mode on a channel..\r\nfunction followersonly(channel, minutes) {\r\n    channel = _.channel(channel);\r\n    minutes = _.get(minutes, 30);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), channel, `/followers ${minutes}`, (resolve, reject) => {\r\n        // Received _promiseFollowers event, resolve or reject..\r\n        this.once(\"_promiseFollowers\", (err) => {\r\n            if (!err) { resolve([channel, ~~minutes]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\n// Disable followers-only mode on a channel..\r\nfunction followersonlyoff(channel) {\r\n    channel = _.channel(channel);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/followersoff\", (resolve, reject) => {\r\n        // Received _promiseFollowersoff event, resolve or reject..\r\n        this.once(\"_promiseFollowersoff\", (err) => {\r\n            if (!err) { resolve([channel]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\n// Leave a channel..\r\nfunction part(channel) {\r\n    channel = _.channel(channel);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), null, `PART ${channel}`, (resolve, reject) => {\r\n        // Received _promisePart event, resolve or reject..\r\n        this.once(\"_promisePart\", (err) => {\r\n            if (!err) { resolve([channel]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\n// Enable R9KBeta mode on a channel..\r\nfunction r9kbeta(channel) {\r\n    channel = _.channel(channel);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/r9kbeta\", (resolve, reject) => {\r\n        // Received _promiseR9kbeta event, resolve or reject..\r\n        this.once(\"_promiseR9kbeta\", (err) => {\r\n            if (!err) { resolve([channel]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\n// Disable R9KBeta mode on a channel..\r\nfunction r9kbetaoff(channel) {\r\n    channel = _.channel(channel);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/r9kbetaoff\", (resolve, reject) => {\r\n        // Received _promiseR9kbetaoff event, resolve or reject..\r\n        this.once(\"_promiseR9kbetaoff\", (err) => {\r\n            if (!err) { resolve([channel]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\n// Enable slow mode on a channel..\r\nfunction slow(channel, seconds) {\r\n    channel = _.channel(channel);\r\n    seconds = _.get(seconds, 300);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), channel, `/slow ${seconds}`, (resolve, reject) => {\r\n        // Received _promiseSlow event, resolve or reject..\r\n        this.once(\"_promiseSlow\", (err) => {\r\n            if (!err) { resolve([channel, ~~seconds]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\n// Disable slow mode on a channel..\r\nfunction slowoff(channel) {\r\n    channel = _.channel(channel);\r\n\r\n    // Send the command to the server and race the Promise against a delay..\r\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/slowoff\", (resolve, reject) => {\r\n        // Received _promiseSlowoff event, resolve or reject..\r\n        this.once(\"_promiseSlowoff\", (err) => {\r\n            if (!err) { resolve([channel]); }\r\n            else { reject(err); }\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    // Send action message (/me <message>) on a channel..\r\n    action: function action(channel, message) {\r\n        channel = _.channel(channel);\r\n        message = `\\u0001ACTION ${message}\\u0001`;\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, reject) => {\r\n            // At this time, there is no possible way to detect if a message has been sent has been eaten\r\n            // by the server, so we can only resolve the Promise.\r\n            resolve([channel, message]);\r\n        });\r\n    },\r\n\r\n    // Ban username on channel..\r\n    ban: function ban(channel, username, reason) {\r\n        channel = _.channel(channel);\r\n        username = _.username(username);\r\n        reason = _.get(reason, \"\");\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, `/ban ${username} ${reason}`, (resolve, reject) => {\r\n            // Received _promiseBan event, resolve or reject..\r\n            this.once(\"_promiseBan\", (err) => {\r\n                if (!err) { resolve([channel, username, reason]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Clear all messages on a channel..\r\n    clear: function clear(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, \"/clear\", (resolve, reject) => {\r\n            // Received _promiseClear event, resolve or reject..\r\n            this.once(\"_promiseClear\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Change the color of your username..\r\n    color: function color(channel, newColor) {\r\n        newColor = _.get(newColor, channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), \"#tmijs\", `/color ${newColor}`, (resolve, reject) => {\r\n            // Received _promiseColor event, resolve or reject..\r\n            this.once(\"_promiseColor\", (err) => {\r\n                if (!err) { resolve([newColor]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Run commercial on a channel for X seconds..\r\n    commercial: function commercial(channel, seconds) {\r\n        channel = _.channel(channel);\r\n        seconds = _.get(seconds, 30);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, `/commercial ${seconds}`, (resolve, reject) => {\r\n            // Received _promiseCommercial event, resolve or reject..\r\n            this.once(\"_promiseCommercial\", (err) => {\r\n                if (!err) { resolve([channel, ~~seconds]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Enable emote-only mode on a channel..\r\n    emoteonly: function emoteonly(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, \"/emoteonly\", (resolve, reject) => {\r\n            // Received _promiseEmoteonly event, resolve or reject..\r\n            this.once(\"_promiseEmoteonly\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Disable emote-only mode on a channel..\r\n    emoteonlyoff: function emoteonlyoff(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, \"/emoteonlyoff\", (resolve, reject) => {\r\n            // Received _promiseEmoteonlyoff event, resolve or reject..\r\n            this.once(\"_promiseEmoteonlyoff\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Enable followers-only mode on a channel..\r\n    followersonly: followersonly,\r\n\r\n    // Alias for followersonly()..\r\n    followersmode: followersonly,\r\n\r\n    // Disable followers-only mode on a channel..\r\n    followersonlyoff: followersonlyoff,\r\n\r\n    // Alias for followersonlyoff()..\r\n    followersmodeoff: followersonlyoff,\r\n\r\n    // Host a channel..\r\n    host: function host(channel, target) {\r\n        channel = _.channel(channel);\r\n        target = _.username(target);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(2000, channel, `/host ${target}`, (resolve, reject) => {\r\n            // Received _promiseHost event, resolve or reject..\r\n            this.once(\"_promiseHost\", (err, remaining) => {\r\n                if (!err) { resolve([channel, target, ~~remaining]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Join a channel..\r\n    join: function join(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), null, `JOIN ${channel}`, (resolve, reject) => {\r\n            // Received _promiseJoin event, resolve or reject..\r\n            this.once(\"_promiseJoin\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Mod username on channel..\r\n    mod: function mod(channel, username) {\r\n        channel = _.channel(channel);\r\n        username = _.username(username);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, `/mod ${username}`, (resolve, reject) => {\r\n            // Received _promiseMod event, resolve or reject..\r\n            this.once(\"_promiseMod\", (err) => {\r\n                if (!err) { resolve([channel, username]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Get list of mods on a channel..\r\n    mods: function mods(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, \"/mods\", (resolve, reject) => {\r\n            // Received _promiseMods event, resolve or reject..\r\n            this.once(\"_promiseMods\", (err, mods) => {\r\n                if (!err) {\r\n                    // Update the internal list of moderators..\r\n                    mods.forEach((username) => {\r\n                        if (!this.moderators[channel]) { this.moderators[channel] = []; }\r\n                        if (this.moderators[channel].indexOf(username) < 0) { this.moderators[channel].push(username); }\r\n                    });\r\n                    resolve(mods);\r\n                } else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Leave a channel..\r\n    part: part,\r\n\r\n    // Alias for part()..\r\n    leave: part,\r\n\r\n    // Send a ping to the server..\r\n    ping: function ping() {\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), null, \"PING\", (resolve, reject) => {\r\n            // Update the internal ping timeout check interval..\r\n            this.latency = new Date();\r\n            this.pingTimeout = setTimeout(() => {\r\n                if (this.ws !== null) {\r\n                    this.wasCloseCalled = false;\r\n                    this.log.error(\"Ping timeout.\");\r\n                    this.ws.close();\r\n\r\n                    clearInterval(this.pingLoop);\r\n                    clearTimeout(this.pingTimeout);\r\n                }\r\n            }, _.get(this.opts.connection.timeout, 9999));\r\n\r\n            // Received _promisePing event, resolve or reject..\r\n            this.once(\"_promisePing\", (latency) => { resolve([parseFloat(latency)]); });\r\n        });\r\n    },\r\n\r\n    // Enable R9KBeta mode on a channel..\r\n    r9kbeta: r9kbeta,\r\n\r\n    // Alias for r9kbeta()..\r\n    r9kmode: r9kbeta,\r\n\r\n    // Disable R9KBeta mode on a channel..\r\n    r9kbetaoff: r9kbetaoff,\r\n\r\n    // Alias for r9kbetaoff()..\r\n    r9kmodeoff: r9kbetaoff,\r\n\r\n    // Send a raw message to the server..\r\n    raw: function raw(message) {\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), null, message, (resolve, reject) => {\r\n            resolve([message]);\r\n        });\r\n    },\r\n\r\n    // Send a message on a channel..\r\n    say: function say(channel, message) {\r\n        channel = _.channel(channel);\r\n\r\n        if ((message.startsWith(\".\") && !message.startsWith(\"..\")) || message.startsWith(\"/\") || message.startsWith(\"\\\\\")) {\r\n            // Check if the message is an action message..\r\n            if (message.substr(1, 3) === \"me \") {\r\n                return this.action(channel, message.substr(4));\r\n            }\r\n            else {\r\n                // Send the command to the server and race the Promise against a delay..\r\n                return this._sendCommand(this._getPromiseDelay(), channel, message, (resolve, reject) => {\r\n                    // At this time, there is no possible way to detect if a message has been sent has been eaten\r\n                    // by the server, so we can only resolve the Promise.\r\n                    resolve([channel, message]);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, reject) => {\r\n            // At this time, there is no possible way to detect if a message has been sent has been eaten\r\n            // by the server, so we can only resolve the Promise.\r\n            resolve([channel, message]);\r\n        });\r\n    },\r\n\r\n    // Enable slow mode on a channel..\r\n    slow: slow,\r\n\r\n    // Alias for slow()..\r\n    slowmode: slow,\r\n\r\n    // Disable slow mode on a channel..\r\n    slowoff: slowoff,\r\n\r\n    // Alias for slowoff()..\r\n    slowmodeoff: slowoff,\r\n\r\n    // Enable subscribers mode on a channel..\r\n    subscribers: function subscribers(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, \"/subscribers\", (resolve, reject) => {\r\n            // Received _promiseSubscribers event, resolve or reject..\r\n            this.once(\"_promiseSubscribers\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Disable subscribers mode on a channel..\r\n    subscribersoff: function subscribersoff(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, \"/subscribersoff\", (resolve, reject) => {\r\n            // Received _promiseSubscribersoff event, resolve or reject..\r\n            this.once(\"_promiseSubscribersoff\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Timeout username on channel for X seconds..\r\n    timeout: function timeout(channel, username, seconds, reason) {\r\n        channel = _.channel(channel);\r\n        username = _.username(username);\r\n\r\n        if (!_.isNull(seconds) && !_.isInteger(seconds)) {\r\n            reason = seconds;\r\n            seconds = 300;\r\n        }\r\n\r\n        seconds = _.get(seconds, 300);\r\n        reason = _.get(reason, \"\");\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, `/timeout ${username} ${seconds} ${reason}`, (resolve, reject) => {\r\n            // Received _promiseTimeout event, resolve or reject..\r\n            this.once(\"_promiseTimeout\", (err) => {\r\n                if (!err) { resolve([channel, username, ~~seconds, reason]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Unban username on channel..\r\n    unban: function unban(channel, username) {\r\n        channel = _.channel(channel);\r\n        username = _.username(username);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, `/unban ${username}`, (resolve, reject) => {\r\n            // Received _promiseUnban event, resolve or reject..\r\n            this.once(\"_promiseUnban\", (err) => {\r\n                if (!err) { resolve([channel, username]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // End the current hosting..\r\n    unhost: function unhost(channel) {\r\n        channel = _.channel(channel);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(2000, channel, \"/unhost\", (resolve, reject) => {\r\n            // Received _promiseUnhost event, resolve or reject..\r\n            this.once(\"_promiseUnhost\", (err) => {\r\n                if (!err) { resolve([channel]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Unmod username on channel..\r\n    unmod: function unmod(channel, username) {\r\n        channel = _.channel(channel);\r\n        username = _.username(username);\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), channel, `/unmod ${username}`, (resolve, reject) => {\r\n            // Received _promiseUnmod event, resolve or reject..\r\n            this.once(\"_promiseUnmod\", (err) => {\r\n                if (!err) { resolve([channel, username]); }\r\n                else { reject(err); }\r\n            });\r\n        });\r\n    },\r\n\r\n    // Send an whisper message to a user..\r\n    whisper: function whisper(username, message) {\r\n        username = _.username(username);\r\n\r\n        // The server will not send a whisper to the account that sent it.\r\n        if (username === this.getUsername()) {\r\n            return Promise.reject(\"Cannot send a whisper to the same account.\");\r\n        }\r\n\r\n        // Send the command to the server and race the Promise against a delay..\r\n        return this._sendCommand(this._getPromiseDelay(), \"#tmijs\", `/w ${username} ${message}`, (resolve, reject) => {\r\n            var from = _.channel(username),\r\n                userstate = _.merge({\r\n                        \"message-type\": \"whisper\",\r\n                        \"message-id\": null,\r\n                        \"thread-id\": null,\r\n                        username: this.getUsername()\r\n                    }, this.globaluserstate);\r\n\r\n            // Emit for both, whisper and message..\r\n            this.emits([\"whisper\", \"message\"], [\r\n                [from, userstate, message, true],\r\n                [from, userstate, message, true]\r\n            ]);\r\n\r\n            // At this time, there is no possible way to detect if a message has been sent has been eaten\r\n            // by the server, so we can only resolve the Promise.\r\n            resolve([username, message]);\r\n        });\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/commands.js\n// module id = 10\n// module chunks = 0","/*\r\n * Copyright Joyent, Inc. and other Node contributors.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to permit\r\n * persons to whom the Software is furnished to do so, subject to the\r\n * following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nif (!String.prototype.startsWith) {\r\n    String.prototype.startsWith = function(searchString, position) {\r\n        position = position || 0;\r\n        return this.indexOf(searchString, position) === position;\r\n    };\r\n}\r\n\r\nfunction EventEmitter() {\r\n    this._events = this._events || {};\r\n    this._maxListeners = this._maxListeners || undefined;\r\n}\r\n\r\nmodule.exports = EventEmitter;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nEventEmitter.defaultMaxListeners = 10;\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function(n) {\r\n    if (!isNumber(n) || n < 0 || isNaN(n)) {\r\n        throw TypeError(\"n must be a positive number\");\r\n    }\r\n\r\n    this._maxListeners = n;\r\n\r\n    return this;\r\n};\r\n\r\n// Emit multiple events..\r\nEventEmitter.prototype.emits = function(types, values) {\r\n    for (var i = 0; i < types.length; i++) {\r\n        values[i].unshift(types[i]);\r\n        this.emit.apply(this, values[i]);\r\n    }\r\n}\r\n\r\nEventEmitter.prototype.emit = function(type) {\r\n    var er, handler, len, args, i, listeners;\r\n\r\n    if (!this._events) { this._events = {}; }\r\n\r\n    // If there is no 'error' event listener then throw.\r\n    if (type === \"error\") {\r\n        if (!this._events.error || (isObject(this._events.error) && !this._events.error.length)) {\r\n            er = arguments[1];\r\n            if (er instanceof Error) { throw er; }\r\n            throw TypeError(\"Uncaught, unspecified \\\"error\\\" event.\");\r\n        }\r\n    }\r\n\r\n    handler = this._events[type];\r\n\r\n    if (isUndefined(handler)) { return false; }\r\n\r\n    if (isFunction(handler)) {\r\n        switch (arguments.length) {\r\n            // fast cases\r\n            case 1:\r\n                handler.call(this);\r\n                break;\r\n            case 2:\r\n                handler.call(this, arguments[1]);\r\n                break;\r\n            case 3:\r\n                handler.call(this, arguments[1], arguments[2]);\r\n                break;\r\n                // slower\r\n            default:\r\n                args = Array.prototype.slice.call(arguments, 1);\r\n                handler.apply(this, args);\r\n        }\r\n    } else if (isObject(handler)) {\r\n        args = Array.prototype.slice.call(arguments, 1);\r\n        listeners = handler.slice();\r\n        len = listeners.length;\r\n        for (i = 0; i < len; i++) { listeners[i].apply(this, args); }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nEventEmitter.prototype.addListener = function(type, listener) {\r\n    var m;\r\n\r\n    if (!isFunction(listener)) { throw TypeError(\"listener must be a function\"); }\r\n\r\n    if (!this._events) { this._events = {}; }\r\n\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (this._events.newListener) {\r\n        this.emit(\"newListener\", type, isFunction(listener.listener) ? listener.listener : listener);\r\n    }\r\n\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    if (!this._events[type]) { this._events[type] = listener; }\r\n    // If we've already got an array, just append.\r\n    else if (isObject(this._events[type])) { this._events[type].push(listener); }\r\n    // Adding the second element, need to change to array.\r\n    else { this._events[type] = [this._events[type], listener]; }\r\n\r\n    // Check for listener leak\r\n    if (isObject(this._events[type]) && !this._events[type].warned) {\r\n        if (!isUndefined(this._maxListeners)) {\r\n            m = this._maxListeners;\r\n        } else {\r\n            m = EventEmitter.defaultMaxListeners;\r\n        }\r\n\r\n        if (m && m > 0 && this._events[type].length > m) {\r\n            this._events[type].warned = true;\r\n            console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\r\n            // Not supported in IE 10\r\n            if (typeof console.trace === \"function\") {\r\n                console.trace();\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\n// Modified to support multiple calls..\r\nEventEmitter.prototype.once = function(type, listener) {\r\n    if (!isFunction(listener)) { throw TypeError(\"listener must be a function\"); }\r\n\r\n    var fired = false;\r\n\r\n    if (this._events.hasOwnProperty(type) && type.charAt(0) === \"_\") {\r\n        var count = 1;\r\n        var searchFor = type;\r\n\r\n        for (var k in this._events){\r\n            if (this._events.hasOwnProperty(k) && k.startsWith(searchFor)) {\r\n                count++;\r\n            }\r\n        }\r\n        type = type + count;\r\n    }\r\n\r\n    function g() {\r\n        if (type.charAt(0) === \"_\" && !isNaN(type.substr(type.length - 1))) {\r\n            type = type.substring(0, type.length - 1);\r\n        }\r\n        this.removeListener(type, g);\r\n\r\n        if (!fired) {\r\n            fired = true;\r\n            listener.apply(this, arguments);\r\n        }\r\n    }\r\n\r\n    g.listener = listener;\r\n    this.on(type, g);\r\n\r\n    return this;\r\n};\r\n\r\n// Emits a \"removeListener\" event if the listener was removed..\r\n// Modified to support multiple calls from .once()..\r\nEventEmitter.prototype.removeListener = function(type, listener) {\r\n    var list, position, length, i;\r\n\r\n    if (!isFunction(listener)) { throw TypeError(\"listener must be a function\"); }\r\n\r\n    if (!this._events || !this._events[type]) { return this; }\r\n\r\n    list = this._events[type];\r\n    length = list.length;\r\n    position = -1;\r\n    if (list === listener || (isFunction(list.listener) && list.listener === listener)) {\r\n        delete this._events[type];\r\n\r\n        if (this._events.hasOwnProperty(type + \"2\") && type.charAt(0) === \"_\") {\r\n            var searchFor = type;\r\n            for (var k in this._events){\r\n                if (this._events.hasOwnProperty(k) && k.startsWith(searchFor)) {\r\n                    if (!isNaN(parseInt(k.substr(k.length - 1)))) {\r\n                        this._events[type + parseInt(k.substr(k.length - 1) - 1)] = this._events[k];\r\n                        delete this._events[k];\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._events[type] = this._events[type + \"1\"];\r\n            delete this._events[type + \"1\"];\r\n        }\r\n        if (this._events.removeListener) { this.emit(\"removeListener\", type, listener); }\r\n    }\r\n    else if (isObject(list)) {\r\n        for (i = length; i-- > 0;) {\r\n            if (list[i] === listener ||\r\n                (list[i].listener && list[i].listener === listener)) {\r\n                position = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (position < 0) { return this; }\r\n\r\n        if (list.length === 1) {\r\n            list.length = 0;\r\n            delete this._events[type];\r\n        }\r\n        else { list.splice(position, 1); }\r\n\r\n        if (this._events.removeListener) { this.emit(\"removeListener\", type, listener); }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nEventEmitter.prototype.removeAllListeners = function(type) {\r\n    var key, listeners;\r\n\r\n    if (!this._events) { return this; }\r\n\r\n    // not listening for removeListener, no need to emit\r\n    if (!this._events.removeListener) {\r\n        if (arguments.length === 0) { this._events = {}; }\r\n        else if (this._events[type]) { delete this._events[type]; }\r\n        return this;\r\n    }\r\n\r\n    // emit removeListener for all listeners on all events\r\n    if (arguments.length === 0) {\r\n        for (key in this._events) {\r\n            if (key === \"removeListener\") { continue; }\r\n            this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners(\"removeListener\");\r\n        this._events = {};\r\n        return this;\r\n    }\r\n\r\n    listeners = this._events[type];\r\n\r\n    if (isFunction(listeners)) { this.removeListener(type, listeners); }\r\n    else if (listeners) { while (listeners.length) { this.removeListener(type, listeners[listeners.length - 1]); } }\r\n    delete this._events[type];\r\n\r\n    return this;\r\n};\r\n\r\nEventEmitter.prototype.listeners = function(type) {\r\n    var ret;\r\n    if (!this._events || !this._events[type]) { ret = []; }\r\n    else if (isFunction(this._events[type])) { ret = [this._events[type]]; }\r\n    else { ret = this._events[type].slice(); }\r\n    return ret;\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = function(type) {\r\n    if (this._events) {\r\n        var evlistener = this._events[type];\r\n\r\n        if (isFunction(evlistener)) { return 1; }\r\n        else if (evlistener) { return evlistener.length; }\r\n    }\r\n    return 0;\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n    return emitter.listenerCount(type);\r\n};\r\n\r\nfunction isFunction(arg) {\r\n    return typeof arg === \"function\";\r\n}\r\n\r\nfunction isNumber(arg) {\r\n    return typeof arg === \"number\";\r\n}\r\n\r\nfunction isObject(arg) {\r\n    return typeof arg === \"object\" && arg !== null;\r\n}\r\n\r\nfunction isUndefined(arg) {\r\n    return arg === void 0;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/events.js\n// module id = 11\n// module chunks = 0","var _ = require('./utils');\r\n\r\nvar currentLevel = \"info\";\r\nvar levels = { \"trace\": 0, \"debug\": 1, \"info\": 2, \"warn\": 3, \"error\": 4, \"fatal\": 5 }\r\n\r\n// Logger implementation..\r\nfunction log(level) {\r\n    // Return a console message depending on the logging level..\r\n    return function (message) {\r\n        if (levels[level] >= levels[currentLevel]) {\r\n            console.log(`[${_.formatDate(new Date())}] ${level}: ${message}`);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    // Change the current logging level..\r\n    setLevel: function(level) {\r\n        currentLevel = level;\r\n    },\r\n    trace: log(\"trace\"),\r\n    debug: log(\"debug\"),\r\n    info: log(\"info\"),\r\n    warn: log(\"warn\"),\r\n    error: log(\"error\"),\r\n    fatal: log(\"fatal\")\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/logger.js\n// module id = 12\n// module chunks = 0","/*\r\n    Copyright (c) 2013-2015, Fionn Kelleher All rights reserved.\r\n\r\n    Redistribution and use in source and binary forms, with or without modification,\r\n    are permitted provided that the following conditions are met:\r\n\r\n        Redistributions of source code must retain the above copyright notice,\r\n        this list of conditions and the following disclaimer.\r\n\r\n        Redistributions in binary form must reproduce the above copyright notice,\r\n        this list of conditions and the following disclaimer in the documentation and/or other materials\r\n        provided with the distribution.\r\n\r\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n    IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n    INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n    OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n    OF SUCH DAMAGE.\r\n*/\r\nvar _ = require(\"./utils\");\r\n\r\nmodule.exports = {\r\n    // Parse Twitch badges..\r\n    badges: function badges(tags) {\r\n        if (_.isString(tags[\"badges\"])) {\r\n            var badges = {};\r\n            var explode = tags[\"badges\"].split(\",\");\r\n\r\n            for (var i = 0; i < explode.length; i++) {\r\n                var parts = explode[i].split(\"/\");\r\n                if (!parts[1]) return;\r\n                badges[parts[0]] = parts[1];\r\n            }\r\n\r\n            tags[\"badges-raw\"] = tags[\"badges\"];\r\n            tags[\"badges\"] = badges;\r\n        }\r\n        if (_.isBoolean(tags[\"badges\"])) { tags[\"badges-raw\"] = null; }\r\n\r\n        return tags;\r\n    },\r\n\r\n    // Parse Twitch emotes..\r\n    emotes: function emotes(tags) {\r\n        if (_.isString(tags[\"emotes\"])) {\r\n            var emoticons = tags[\"emotes\"].split(\"/\");\r\n            var emotes = {};\r\n\r\n            for (var i = 0; i < emoticons.length; i++) {\r\n                var parts = emoticons[i].split(\":\");\r\n                if (!parts[1]) return;\r\n                emotes[parts[0]] = parts[1].split(\",\");\r\n            }\r\n\r\n            tags[\"emotes-raw\"] = tags[\"emotes\"];\r\n            tags[\"emotes\"] = emotes;\r\n        }\r\n        if (_.isBoolean(tags[\"emotes\"])) { tags[\"emotes-raw\"] = null; }\r\n\r\n        return tags;\r\n    },\r\n\r\n    // Parse regex emotes..\r\n    emoteRegex: function emoteRegex(msg, code, id, obj) {\r\n        var space = /\\S+/g;\r\n        var regex = new RegExp(\"(\\\\b|^|\\s)\"+_.unescapeHtml(code)+\"(\\\\b|$|\\s)\");\r\n        var match;\r\n\r\n        // Check if emote code matches using RegExp and push it to the object..\r\n        while ((match = space.exec(msg)) !== null) {\r\n            if (regex.test(match[0])) {\r\n                obj[id] = obj[id] || [];\r\n                obj[id].push([match.index, space.lastIndex - 1])\r\n            }\r\n        }\r\n    },\r\n\r\n    // Parse string emotes..\r\n    emoteString: function emoteString(msg, code, id, obj) {\r\n        var space = /\\S+/g;\r\n        var match;\r\n\r\n        // Check if emote code matches and push it to the object..\r\n        while ((match = space.exec(msg)) !== null) {\r\n            if (match[0] === _.unescapeHtml(code)) {\r\n                obj[id] = obj[id] || [];\r\n                obj[id].push([match.index, space.lastIndex - 1]);\r\n            }\r\n        }\r\n    },\r\n\r\n    // Transform the emotes object to a string with the following format..\r\n    // emote_id:first_index-last_index,another_first-another_last/another_emote_id:first_index-last_index\r\n    transformEmotes: function transformEmotes(emotes) {\r\n        var transformed = \"\";\r\n\r\n        Object.keys(emotes).forEach((id) => {\r\n            transformed = `${transformed+id}:`;\r\n            emotes[id].forEach((index) => {\r\n                transformed = `${transformed+index.join(\"-\")},`;\r\n            });\r\n            transformed = `${transformed.slice(0,-1)}/`;\r\n        });\r\n\r\n        return transformed.slice(0,-1);\r\n    },\r\n\r\n    // Parse Twitch messages..\r\n    msg: function msg(data) {\r\n        var message = {\r\n            raw: data,\r\n            tags: {},\r\n            prefix: null,\r\n            command: null,\r\n            params: []\r\n        }\r\n\r\n        // Position and nextspace are used by the parser as a reference..\r\n        var position = 0;\r\n        var nextspace = 0;\r\n\r\n        // The first thing we check for is IRCv3.2 message tags.\r\n        // http://ircv3.atheme.org/specification/message-tags-3.2\r\n        if (data.charCodeAt(0) === 64) {\r\n            var nextspace = data.indexOf(\" \");\r\n\r\n            // Malformed IRC message..\r\n            if (nextspace === -1) {\r\n                return null;\r\n            }\r\n\r\n            // Tags are split by a semi colon..\r\n            var rawTags = data.slice(1, nextspace).split(\";\");\r\n\r\n            for (var i = 0; i < rawTags.length; i++) {\r\n                // Tags delimited by an equals sign are key=value tags.\r\n                // If there's no equals, we assign the tag a value of true.\r\n                var tag = rawTags[i];\r\n                var pair = tag.split(\"=\");\r\n                message.tags[pair[0]] = tag.substring(tag.indexOf(\"=\") + 1) || true;\r\n            }\r\n\r\n            position = nextspace + 1;\r\n        }\r\n\r\n        // Skip any trailing whitespace..\r\n        while (data.charCodeAt(position) === 32) {\r\n            position++;\r\n        }\r\n\r\n        // Extract the message's prefix if present. Prefixes are prepended with a colon..\r\n        if (data.charCodeAt(position) === 58) {\r\n            nextspace = data.indexOf(\" \", position);\r\n\r\n            // If there's nothing after the prefix, deem this message to be malformed.\r\n            if (nextspace === -1) {\r\n                return null;\r\n            }\r\n\r\n            message.prefix = data.slice(position + 1, nextspace);\r\n            position = nextspace + 1;\r\n\r\n            // Skip any trailing whitespace..\r\n            while (data.charCodeAt(position) === 32) {\r\n                position++;\r\n            }\r\n        }\r\n\r\n        nextspace = data.indexOf(\" \", position);\r\n\r\n        // If there's no more whitespace left, extract everything from the\r\n        // current position to the end of the string as the command..\r\n        if (nextspace === -1) {\r\n            if (data.length > position) {\r\n                message.command = data.slice(position);\r\n                return message;\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        // Else, the command is the current position up to the next space. After\r\n        // that, we expect some parameters.\r\n        message.command = data.slice(position, nextspace);\r\n\r\n        position = nextspace + 1;\r\n\r\n        // Skip any trailing whitespace..\r\n        while (data.charCodeAt(position) === 32) {\r\n            position++;\r\n        }\r\n\r\n        while (position < data.length) {\r\n            nextspace = data.indexOf(\" \", position);\r\n\r\n            // If the character is a colon, we've got a trailing parameter.\r\n            // At this point, there are no extra params, so we push everything\r\n            // from after the colon to the end of the string, to the params array\r\n            // and break out of the loop.\r\n            if (data.charCodeAt(position) === 58) {\r\n                message.params.push(data.slice(position + 1));\r\n                break;\r\n            }\r\n\r\n            // If we still have some whitespace...\r\n            if (nextspace !== -1) {\r\n                // Push whatever's between the current position and the next\r\n                // space to the params array.\r\n                message.params.push(data.slice(position, nextspace));\r\n                position = nextspace + 1;\r\n\r\n                // Skip any trailing whitespace and continue looping.\r\n                while (data.charCodeAt(position) === 32) {\r\n                    position++;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            // If we don't have any more whitespace and the param isn't trailing,\r\n            // push everything remaining to the params array.\r\n            if (nextspace === -1) {\r\n                message.params.push(data.slice(position));\r\n                break;\r\n            }\r\n        }\r\n\r\n        return message;\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/parser.js\n// module id = 13\n// module chunks = 0","// Initialize the queue with a specific delay..\r\nfunction queue(defaultDelay) {\r\n    this.queue = [];\r\n    this.index = 0;\r\n    this.defaultDelay = defaultDelay || 3000;\r\n}\r\n\r\n// Add a new function to the queue..\r\nqueue.prototype.add = function add(fn, delay) {\r\n    this.queue.push({\r\n        fn: fn,\r\n        delay: delay\r\n    });\r\n};\r\n\r\n// Run the current queue..\r\nqueue.prototype.run = function run(index) {\r\n    (index || index === 0) && (this.index = index);\r\n    this.next();\r\n};\r\n\r\n// Go to the next in queue..\r\nqueue.prototype.next = function next() {\r\n    var i = this.index++;\r\n    var at = this.queue[i];\r\n    var next = this.queue[this.index];\r\n\r\n    if (!at) { return; }\r\n\r\n    at.fn();\r\n    next && setTimeout(() => {\r\n        this.next();\r\n    }, next.delay || this.defaultDelay);\r\n};\r\n\r\n// Reset the queue..\r\nqueue.prototype.reset = function reset() {\r\n    this.index = 0;\r\n};\r\n\r\n// Clear the queue..\r\nqueue.prototype.clear = function clear() {\r\n    this.index = 0;\r\n    this.queue = [];\r\n};\r\n\r\nexports.queue = queue;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tmi.js/lib/timer.js\n// module id = 14\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ws (ignored)\n// module id = 15\n// module chunks = 0","module.exports.config = {\r\n    //Twitch Identifiant\r\n    username: \"volca780\",\r\n    password: \"oauth:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\r\n\r\n    //Twitch chanel\r\n    channel: \"#volca780\"\r\n};\n\n\n// WEBPACK FOOTER //\n// ./config.js","module.exports = {\"templatecrosswords\":[[[\"COULER\",\"Flot de lave.\",\"3:1\",[\"3:2\",\"3:3\",\"3:4\",\"3:5\",\"3:6\",\"3:7\"],false],[\"ILES\",\"Les canaries.\",\"1:5\",[\"2:5\",\"3:5\",\"4:5\",\"5:5\"],false],[\"VOLONTE\",\"Détermination.\",\"1:3\",[\"2:3\",\"3:3\",\"4:3\",\"5:3\",\"6:3\",\"7:3\",\"8:3\"],false],[\"INEGALE\",\"Pas unie, raboteuse.\",\"7:2\",[\"8:2\",\"9:2\",\"10:2\",\"11:2\",\"12:2\",\"13:2\",\"14:2\"],false],[\"GAI\",\"Constent joyeux.\",\"11:1\",[\"11:2\",\"11:3\",\"11:4\"],false],[\"UN\",\"Début du compte.\",\"13:3\",[\"13:4\",\"13:5\"],false],[\"ROI\",\"Sa majesté.\",\"11:7\",[\"12:7\",\"13:7\",\"14:7\"],false],[\"METEO\",\"Prévoit le temp.\",\"10:8\",[\"10:9\",\"10:10\",\"10:11\",\"10:12\",\"10:13\"],false],[\"RECTUM\",\"Bout d'intestin.\",\"6:11\",[\"7:11\",\"8:11\",\"9:11\",\"10:11\",\"11:11\",\"12:11\"],false],[\"RECREATION\",\"Pause à l'école.\",\"1:13\",[\"2:13\",\"3:13\",\"4:13\",\"5:13\",\"6:13\",\"7:13\",\"8:13\",\"9:13\",\"10:13\",\"11:13\"],false],[\"ENERVE\",\"Excités.\",\"9:10\",[\"10:10\",\"11:10\",\"12:10\",\"13:10\",\"14:10\",\"15:10\"],false],[\"AVRIL\",\"Mois du poisson.\",\"14:8\",[\"14:9\",\"14:10\",\"14:11\",\"14:12\",\"14:13\"],false],[\"DEPOSER\",\"Mettre au dépot.\",\"5:6\",[\"5:7\",\"5:8\",\"5:9\",\"5:10\",\"5:11\",\"5:12\",\"5:13\"],false],[\"POT\",\"La chance.\",\"4:9\",[\"5:9\",\"6:9\",\"7:9\"],false],[\"TSAR\",\"Souverain russe.\",\"16:4\",[\"16:5\",\"16:6\",\"16:7\",\"16:8\"],false],[\"ANCRE\",\"Jetée au port.\",\"15:7\",[\"16:7\",\"17:7\",\"18:7\",\"19:7\",\"20:7\"],false],[\"AS\",\"Carte maîtresse.\",\"19:3\",[\"19:4\",\"19:5\"],false]]]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./data/crosswords.json\n// module id = 17\n// module chunks = 0"],"sourceRoot":""}